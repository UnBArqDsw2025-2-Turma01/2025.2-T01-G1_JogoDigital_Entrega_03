{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Apresenta\u00e7\u00e3o do projeto","text":""},{"location":"#introducao","title":"Introdu\u00e7\u00e3o","text":"<p>Este projeto se trada da Entrega 03 desenvolvido pelo Grupo 01 da disciplina Arquitetura e Desenho de Software (FGA0208), ministrada pela professora Milene Serrano.  </p> <p>A proposta consiste na cria\u00e7\u00e3o de um jogo digital do g\u00eanero tower defense, inspirado em t\u00edtulos consagrados como Plantas vs. Zumbis, no qual o jogador deve utilizar estrat\u00e9gias de defesa para proteger sua base contra ondas sucessivas de inimigos.  </p> <p></p> <p><p>Fonte: Pinterest, 2025.</p></p> <p>Diferencialmente, este projeto incorpora a tem\u00e1tica do folclore brasileiro, trazendo personagens, criaturas e elementos culturais nacionais para dentro da experi\u00eancia de jogo. Entidades protetoras do folclore, como Curupira, Saci e Iara, assumem o papel de defensores, enquanto figuras como Boitat\u00e1, Cuca e Mapinguari se apresentam como inimigos desafiadores.  </p> <p></p> <p><p>Fonte: Maria Eduarda 2025.</p></p> <p>Dessa forma, al\u00e9m de proporcionar entretenimento, o jogo busca valorizar a cultura popular brasileira, promovendo uma experi\u00eancia l\u00fadica, educativa e ao mesmo tempo estrat\u00e9gica, que conecta a tradi\u00e7\u00e3o oral do folclore com a tecnologia digital e o design de software.  </p> <p>A organiza\u00e7\u00e3o do projeto foi feita de forma colaborativa, onde os integrantes da equipe de desenvolvimento e de produ\u00e7\u00e3o se reuniram para discutir e elaborar o projeto. Por meio da ferramenta Trello conseguimos organizar as tarefas e o trabalho em cada etapa do desenvolvimento, o que permitiu uma melhor organiza\u00e7\u00e3o e uma maior efici\u00eancia na produ\u00e7\u00e3o. Tasks e Organiza\u00e7\u00e3o presentes AQUI.</p>"},{"location":"#estrutura-do-repositorioprojeto","title":"Estrutura do Reposit\u00f3rio/Projeto","text":"<p>O projeto como uma forma organizacional fez o repositorio do projeto separado, onde conseguimos executar de melhor forma as tarefas e organizar o trabalho em cada etapa do desenvolvimento. A seguir, \u00e9 apresentado a estrutura do reposit\u00f3rio AQUI.</p> <p><p>Tabela 1: Estrutura</p></p> Pacote Funcionalidade Principal Core Cont\u00e9m o motor, a l\u00f3gica fundamental e os servi\u00e7os globais do jogo. Asset Armazena e gerencia todos os recursos externos (texturas, sons, modelos 3D, etc.). Template Fornece estruturas base e layouts predefinidos para objetos ou UI. View Respons\u00e1vel pela apresenta\u00e7\u00e3o visual (gr\u00e1ficos, interface) e pela entrada do usu\u00e1rio. Model Gerencia a l\u00f3gica de neg\u00f3cios e o estado dos dados do jogo. <p><p>Fonte: Equipe do Projeto, 2025.</p></p>"},{"location":"#screenshots-da-terceira-entrega","title":"Screenshots da Terceira Entrega","text":""},{"location":"#foco-1-gofs-criacionais","title":"FOCO 1 - GoF's Criacionais","text":"<p> <p>Fonte: Caio Duarte, Laryssa F\u00e9lix, Rafael Schadt, Victor Pontual, 2025.</p></p>"},{"location":"#foco-2-gofs-estruturais","title":"FOCO 2 - GoF's Estruturais","text":"<p> <p>Fonte: Caio Duarte, Laryssa F\u00e9lix, Marcelo Matoko, Maria Eduarda, Rafael Schadt, 2025.</p></p>"},{"location":"#foco-3-gofs-comportamentais","title":"FOCO 3 - GoF's Comportamentais","text":"<p> <p>Fonte: Danielle Soares, Leticia Arisa, Maria Eduarda, 2025.</p></p>"},{"location":"#ha-algo-a-ser-executado","title":"H\u00e1 algo a ser executado?","text":"<p>( ) SIM</p> <p>(X) N\u00c3O</p>"},{"location":"#informacoes-complementares","title":"Informa\u00e7\u00f5es Complementares","text":"<p>Quaisquer outras informa\u00e7\u00f5es adicionais podem ser descritas nessa se\u00e7\u00e3o.</p>"},{"location":"#integrantes","title":"Integrantes","text":"Caio Duarte Danielle Soares Enzo Emir Laryssa F\u00e9lix Leticia Arisa Marcelo Makoto Maria Eduarda Victor Pontual Rafael Welz"},{"location":"#historico-de-versoes","title":"Hist\u00f3rico de vers\u00f5es","text":"<p><p>Tabela 1: Hist\u00f3rico de vers\u00f5es</p></p> Vers\u00e3o Descri\u00e7\u00e3o Autor Data Revisor 1.0 Cria\u00e7\u00e3o do documento Maria Eduarda 22/10/2025 Caio Duarte <p><p>Fonte: Caio Duarte, Danielle Soares, Enzo Emir, Laryssa F\u00e9lix, Let\u00edcia Arisa, Marcelo Makoto, Maria Eduarda, Victor Pontual e Rafael Welz 2025.</p> </p>"},{"location":"_sidebar/","title":"sidebar","text":"<ul> <li>Home</li> <li> <p>Projetos</p> </li> <li> <p>Padr\u00f5es de Projeto</p> </li> <li>3. Desenho de Software (Padr\u00f5es de Projeto)<ul> <li>3.1. Padr\u00f5es de Projeto GoFs Criacionais</li> <li>3.2. Padr\u00f5es de Projeto GoFs Estruturais</li> <li>3.3. Padr\u00f5es de Projeto GoFs Comportamentais</li> <li>3.4. Participa\u00e7\u00f5es - Padr\u00f5es de Projeto</li> <li>3.5. Iniciativas Extras - Padr\u00f5es de Projeto</li> </ul> </li> </ul>"},{"location":"Atas/Entrega%2003/Ata%20I/","title":"ATA REUNI\u00c3O 02/10 - Jogo Digital (Entrega 03)","text":"<p>Data: 02/10 Hora: 21h30 Local: Discord</p> <p>Membros Presentes:  Caio Duarte, Enzo Emir, Leticia Arisa, Marcelo Makoto, Maria Eduarda, Victor Pontual, Rafael Welz.</p>"},{"location":"Atas/Entrega%2003/Ata%20I/#pauta","title":"Pauta","text":"<ol> <li>Discurss\u00e3o sobre a estrutura Organizacional da execu\u00e7\u00e3o do Projeto.  </li> <li>Divis\u00e3o das tarefas no Trello, entre os membros da equipe dentro do projeto, tendo em vista a estrutura organizacional ja docuemtntada as entregas anteriores.</li> <li>Discurss\u00e3o inicial sobre a Entrega 03 do projeto (Prazos, Entregas, Focos, etc).</li> </ol>"},{"location":"Atas/Entrega%2003/Ata%20I/#discussoes-realizadas","title":"Discuss\u00f5es Realizadas","text":"<p>Na reuni\u00e3o, o grupo discutiu a continuidade do desenvolvimento do projeto, analisando os detalhes e prazos conforme o cronograma da disciplina, as ferramentas dispon\u00edveis e a disponibilidade dos membros. Em seguida, cada membro da equipe compartilhou sua opini\u00e3o sobre os prazos e a organiza\u00e7\u00e3o, propondo ideias sobre como abordar cada parte e o que seria necess\u00e1rio para o desenvolvimento.</p> <p>Em seguida, as tarefas foram distribu\u00eddas entre os membros do time, para que todos pudessem contribuir de forma equilibrada. Para organizar tudo, foi criado um quadro no Trello, onde as responsabilidades e prazos ficaram bem definidos. Al\u00e9m disso, a galera enfatizou a import\u00e2ncia de se comunicar bem e acompanhar o andamento das tarefas, para garantir que tudo fosse feito no tempo certo.</p>"},{"location":"Atas/Entrega%2003/Ata%20I/#decisoes-tomadas","title":"Decis\u00f5es Tomadas","text":"<ul> <li>O Trello foi criado para organizar as tarefas de cada membro da equipe.</li> <li>Foram definidas as etapas de desenvolvimento do projeto, com foco nos Diagramas de Componentes.</li> <li>Decidimos implementar a comunica\u00e7\u00e3o atrav\u00e9s do WhatsApp, com pequenas \"dailies\" di\u00e1rias, e realizar reuni\u00f5es de desenvolvimento via Discord.</li> </ul>"},{"location":"Atas/Entrega%2003/Ata%20I/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<ul> <li>Realizar um relat\u00f3rio sobre o que foi desenvolvido at\u00e9 o momento e o que ser\u00e1 abordado na pr\u00f3xima reuni\u00e3o.</li> <li>Iniciar a etapa da Entrega 03.</li> </ul> <p>Observa\u00e7\u00e3o: N\u00e3o houve grava\u00e7\u00e3o da chamada no Discord.</p>"},{"location":"Atas/Entrega%2003/Ata%20I/#historico-de-versoes","title":"Hist\u00f3rico de Vers\u00f5es \ud83d\udcc5","text":"Vers\u00e3o Data Descri\u00e7\u00e3o Autor(es) Revisor(es) <code>0.1</code> 22/10/2025 Cria\u00e7\u00e3o das Ata I Maria Eduarda Marcelo Makoto <p><p>Fonte: Caio Duarte, Danielle Soares, Enzo Emir, Laryssa F\u00e9lix, Let\u00edcia Arisa, Marcelo Makoto, Maria Eduarda, Victor Pontual e Rafael Welz 2025.</p></p>"},{"location":"Atas/Entrega%2003/Ata%20II/","title":"ATA REUNI\u00c3O 13/10 - Jogo Digital (Entrega 03)","text":"<p>Data: 13/10 Hora: 20h00 Local: Discord</p> <p>Membros Presentes:  Caio Duarte, Enzo Emir, Laryssa F\u00e9lix, Leticia Arisa, Marcelo Makoto, Maria Eduarda, Victor Pontual, Rafael Welz.</p>"},{"location":"Atas/Entrega%2003/Ata%20II/#pauta","title":"Pauta","text":"<ol> <li>Discuss\u00e3o sobre a Entrega 03 do projeto.  </li> <li>Estudo da Entrega 02 e discuss\u00e3o/organiza\u00e7\u00e3o sobre cada um dos 3 focos.</li> <li>Distribui\u00e7\u00e3o das tarefas entre os membros da equipe, bem como a cria\u00e7\u00e3o do Trello.</li> </ol>"},{"location":"Atas/Entrega%2003/Ata%20II/#discussoes-realizadas","title":"Discuss\u00f5es Realizadas","text":"<p>Na reuni\u00e3o, o grupo discutiu a Entrega 03 do projeto, analisando os detalhes e prazos definidos pela professora. Em seguida, cada um se aprofundou nos dois primeiros focos da entrega, iniciando a organiza\u00e7\u00e3o da Entrega conforme os t\u00f3picos abordados nas aulas e focos dados pela professora. Por fim, a equipe compartilhou ideias sobre como abordar cada parte e o que seria necess\u00e1rio para o desenvolvimento. </p> <p>As tarefas foram distribu\u00eddas entre os membros do time de forma equilibrada. Para organizar o trabalho, foi criado um quadro no Trello, onde as responsabilidades e prazos ficaram bem definidos. Al\u00e9m disso, enfatizou-se a import\u00e2ncia de uma boa comunica\u00e7\u00e3o e acompanhamento do andamento das tarefas, para garantir que tudo fosse feito dentro do prazo estabelecido.</p>"},{"location":"Atas/Entrega%2003/Ata%20II/#decisoes-tomadas","title":"Decis\u00f5es Tomadas","text":"<ul> <li>O Trello foi criado para organizar as tarefas e o trabalho em cada etapa do desenvolvimento dos dois primeiros focos.</li> <li>Foram definidos dois ou tr\u00eas padr\u00f5es de projeto em cada foco.</li> <li>Estabelecemos prazos curtos para cada foco.</li> <li>Foi decidido que os membros da equipe ter\u00e3o reuni\u00f5es individuais para documentar e gravar cada parte dos focos definidos.</li> </ul>"},{"location":"Atas/Entrega%2003/Ata%20II/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<ul> <li>Realizar a 2\u00aa reuni\u00e3o para discutir o progresso do foco anterior e avan\u00e7ar para o pr\u00f3ximo.</li> <li>Revisar os t\u00f3picos dentro do foco anterior que precisam ser corrigidos.</li> <li>Alocar os membros para os focos subsequentes.</li> </ul> <p>Observa\u00e7\u00e3o: N\u00e3o houve grava\u00e7\u00e3o da chamada no Discord.</p>"},{"location":"Atas/Entrega%2003/Ata%20II/#historico-de-versoes","title":"Hist\u00f3rico de Vers\u00f5es \ud83d\udcc5","text":"Vers\u00e3o Data Descri\u00e7\u00e3o Autor(es) Revisor(es) <code>0.1</code> 22/10/2025 Cria\u00e7\u00e3o das Ata II Maria Eduarda Caio Duarte <p><p>Fonte: Caio Duarte, Danielle Soares, Enzo Emir, Laryssa F\u00e9lix, Let\u00edcia Arisa, Marcelo Makoto, Maria Eduarda, Victor Pontual e Rafael Welz 2025.</p></p>"},{"location":"Atas/Entrega%2003/Ata%20III/","title":"ATA REUNI\u00c3O 20/10 - Jogo Digital (Entrega 03)","text":"<p>Data: 20/10 Hora: 21h00 Local: Discord</p> <p>Membros Presentes: Caio Duarte, Enzo Emir, Laryssa F\u00e9lix, Leticia Arisa, Marcelo Makoto, Maria Eduarda, Victor Pontual, Rafael Welz.</p>"},{"location":"Atas/Entrega%2003/Ata%20III/#pauta","title":"Pauta","text":"<ol> <li>Discuss\u00e3o sobre a Entrega 03 do projeto.  </li> <li>Finaliza\u00e7\u00e3o dos focos 2 e 3 da entrega.  </li> <li>Defini\u00e7\u00e3o dos respons\u00e1veis pela apresenta\u00e7\u00e3o da entrega.  </li> <li>Revis\u00e3o dos detalhes finais e corre\u00e7\u00f5es da p\u00e1gina.</li> </ol>"},{"location":"Atas/Entrega%2003/Ata%20III/#discussoes-realizadas","title":"Discuss\u00f5es Realizadas","text":"<p>Na reuni\u00e3o, o grupo discutiu os detalhes finais para a reta final da entrega. O foco principal foi a finaliza\u00e7\u00e3o dos focos 2 e 3, que foram conclu\u00eddos com os ajustes necess\u00e1rios. Em seguida, discutimos a distribui\u00e7\u00e3o das tarefas finais e quem ficaria respons\u00e1vel pela apresenta\u00e7\u00e3o da entrega.</p> <p>A equipe tamb\u00e9m revisou as \u00faltimas corre\u00e7\u00f5es da p\u00e1gina, garantindo que todos os pontos fossem ajustados antes do envio. Durante a reuni\u00e3o, todos os membros participaram ativamente, oferecendo sugest\u00f5es para melhorar a apresenta\u00e7\u00e3o e garantir que a entrega atendesse \u00e0s expectativas da professora.</p>"},{"location":"Atas/Entrega%2003/Ata%20III/#decisoes-tomadas","title":"Decis\u00f5es Tomadas","text":"<ul> <li>Finalizamos os focos 2 e 3 do projeto, com todas as corre\u00e7\u00f5es e ajustes necess\u00e1rios.</li> <li>Foi definida a pessoa respons\u00e1vel pela apresenta\u00e7\u00e3o da entrega.</li> <li>A equipe revisou e ajustou os detalhes finais da p\u00e1gina, preparando-a para a entrega.</li> <li>Decidimos realizar a \u00faltima reuni\u00e3o de alinhamento antes da entrega final para garantir que tudo esteja pronto.</li> </ul>"},{"location":"Atas/Entrega%2003/Ata%20III/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<ul> <li>Realizar a \u00faltima reuni\u00e3o de alinhamento antes da entrega final, para garantir que todos os detalhes est\u00e3o completos.</li> <li>Finalizar a apresenta\u00e7\u00e3o e revisar os pontos discutidos na reuni\u00e3o.</li> <li>Submeter a entrega final conforme os prazos estabelecidos.</li> </ul> <p>Observa\u00e7\u00e3o: N\u00e3o houve grava\u00e7\u00e3o da chamada no Discord.</p>"},{"location":"Atas/Entrega%2003/Ata%20III/#historico-de-versoes","title":"Hist\u00f3rico de Vers\u00f5es \ud83d\udcc5","text":"Vers\u00e3o Data Descri\u00e7\u00e3o Autor(es) Revisor(es) <code>0.1</code> 22/10/2025 Cria\u00e7\u00e3o da Ata Final Maria Eduarda Danielle Soares <p><p>Fonte: Caio Duarte, Danielle Soares, Enzo Emir, Laryssa F\u00e9lix, Let\u00edcia Arisa, Marcelo Makoto, Maria Eduarda, Victor Pontual e Rafael Welz 2025.</p></p>"},{"location":"PadroesDeProjeto/3.1.GoFsCriacionais/","title":"3.1. M\u00f3dulo Padr\u00f5es de Projeto GoFs Criacionais","text":""},{"location":"PadroesDeProjeto/3.1.GoFsCriacionais/#311-introducao","title":"3.1.1. Introdu\u00e7\u00e3o","text":"<p>Os Padr\u00f5es de Projeto Criacionais, parte do cat\u00e1logo da \"Gang of Four\" (GoF) [1], representam solu\u00e7\u00f5es consagradas para problemas recorrentes relacionados \u00e0 cria\u00e7\u00e3o de objetos em software orientado a objetos. Diferentemente dos padr\u00f5es Estruturais e Comportamentais, que lidam com a composi\u00e7\u00e3o de classes e a comunica\u00e7\u00e3o entre objetos, os padr\u00f5es Criacionais focam em como instanciar objetos de maneira flex\u00edvel, independente e reutiliz\u00e1vel.</p> <p>Esses padr\u00f5es s\u00e3o essenciais para controlar a complexidade associada \u00e0 cria\u00e7\u00e3o de objetos, permitindo encapsular a l\u00f3gica de constru\u00e7\u00e3o, reduzir depend\u00eancias diretas e tornar o c\u00f3digo mais adapt\u00e1vel a mudan\u00e7as. Eles oferecem formas padronizadas de criar inst\u00e2ncias sem acoplar o c\u00f3digo a classes concretas, aumentando a coes\u00e3o, a reutiliza\u00e7\u00e3o e a testabilidade do sistema.</p>"},{"location":"PadroesDeProjeto/3.1.GoFsCriacionais/#312-participantes","title":"3.1.2. Participantes","text":"<p><p>Tabela 1: Participantes</p></p> Nome Fun\u00e7\u00e3o Data Hora Caio Duarte GoF Criacional - Singleton 23/10/2025 20:30 Danielle Soares GoF Criacional - Prototype 24/10/2025 00:00 Enzo Emir GoF Criacional - Prototype 24/10/2025 00:00 Laryssa F\u00e9lix GoF Criacional - Singleton 23/10/2025 20:30 Leticia Arisa GoF Criacional - Prototype 24/10/2025 00:00 Marcelo Makoto GoF Criacional - Prototype 24/10/2025 00:00 Maria Eduarda GoF Criacional - Prototype 24/10/2025 00:00 Rafael Schadt GoF Criacional - Singleton 23/10/2025 20:30 Victor Pontual GoF Criacional - Singleton 23/10/2025 20:30 <p><p>Fonte: Equipe do Projeto, 2025.</p></p>"},{"location":"PadroesDeProjeto/3.1.GoFsCriacionais/#313-metodologia","title":"3.1.3. Metodologia","text":"<p>A pesquisa e desenvolvimento do estudo dos Padr\u00f5es de Projeto Criacionais foram conduzidos seguindo uma abordagem pr\u00e1tica e colaborativa, com foco na cria\u00e7\u00e3o eficiente e flex\u00edvel de objetos dentro do sistema de software do jogo.</p>"},{"location":"PadroesDeProjeto/3.1.GoFsCriacionais/#3131-revisao-e-selecao-de-padroes","title":"3.1.3.1. Revis\u00e3o e Sele\u00e7\u00e3o de Padr\u00f5es","text":"<p>Foi realizada uma revis\u00e3o do cat\u00e1logo de Padr\u00f5es de Projeto Criacionais da GoF, selecionando os padr\u00f5es mais relevantes para controlar a cria\u00e7\u00e3o de inst\u00e2ncias de entidades do jogo, garantindo que o c\u00f3digo ficasse mais modular e f\u00e1cil de estender.</p>"},{"location":"PadroesDeProjeto/3.1.GoFsCriacionais/#3132-aplicacao-e-implementacao","title":"3.1.3.2. Aplica\u00e7\u00e3o e Implementa\u00e7\u00e3o","text":"<p>O padr\u00e3o selecionado (Singleton) foi implementado no c\u00f3digo-fonte do jogo. Essa etapa visou reduzir acoplamento direto \u00e0s classes concretas e fornecer um mecanismo centralizado de gerenciamento de recursos.</p>"},{"location":"PadroesDeProjeto/3.1.GoFsCriacionais/#3133-modelagem-e-documentacao-uml","title":"3.1.3.3. Modelagem e Documenta\u00e7\u00e3o UML","text":"<p>Para documentar visualmente a aplica\u00e7\u00e3o dos padr\u00f5es, utilizou-se o Draw.io para criar Diagramas de Classes.</p>"},{"location":"PadroesDeProjeto/3.1.GoFsCriacionais/#3134-demonstracao-e-colaboracao","title":"3.1.3.4. Demonstra\u00e7\u00e3o e Colabora\u00e7\u00e3o","text":"<p>Sess\u00f5es de desenvolvimento e explica\u00e7\u00e3o do c\u00f3digo foram registradas via Microsoft Teams, documentando o processo de aplica\u00e7\u00e3o dos padr\u00f5es e o fluxo colaborativo da equipe.</p> <p><p>V\u00eddeo 1: Sess\u00e3o de desenvolvimento e explica\u00e7\u00e3o do padr\u00e3o Singleton.</p></p> <p><p>Fonte: Equipe do Projeto, 2025.</p></p>"},{"location":"PadroesDeProjeto/3.1.GoFsCriacionais/#314-singleton","title":"3.1.4. Singleton","text":"<p>O padr\u00e3o Singleton garante que uma classe tenha uma \u00fanica inst\u00e2ncia e fornece um ponto global de acesso a ela. No projeto, foi usado para gerenciar recursos globais, como os assets do jogo, garantindo que sejam carregados uma \u00fanica vez e compartilhados por todo o sistema.</p>"},{"location":"PadroesDeProjeto/3.1.GoFsCriacionais/#3141-diagrama-uml","title":"3.1.4.1. Diagrama UML","text":"<p>O Singleton foi aplicado no gerenciamento de inst\u00e2ncias dos Assets:</p> <p></p> <p><p>Figura 1: Diagrama de Classes do padr\u00e3o Singleton aplicado ao AssetProvider.</p></p> <p><p>Fonte: Equipe do Projeto, 2025.</p></p> <p>O diagrama UML ilustra como a classe <code>AssetProvider</code> implementa o padr\u00e3o Singleton, centralizando o gerenciamento de todos os assets do jogo (imagens, fontes, sprites) e garantindo que esses recursos sejam carregados apenas uma vez durante a execu\u00e7\u00e3o do programa. A classe utiliza m\u00e9todos est\u00e1ticos (<code>@classmethod</code>) para controlar o acesso aos recursos e prevenir m\u00faltiplas instancia\u00e7\u00f5es atrav\u00e9s do m\u00e9todo <code>__init__</code> que lan\u00e7a uma exce\u00e7\u00e3o.</p>"},{"location":"PadroesDeProjeto/3.1.GoFsCriacionais/#3142-implementacao","title":"3.1.4.2. Implementa\u00e7\u00e3o","text":"C\u00f3digo de Implementa\u00e7\u00e3o do Padr\u00e3o Singleton <pre><code>import pygame\nimport os\nfrom Template.UIConfigs import *\n\nclass AssetProvider:\n\"\"\"\nSingleton para gerenciamento centralizado de assets do jogo.\n\"\"\"\nASSETS = {}\n\\_loaded = False\n\n    def __init__(self):\n        \"\"\"Impede instancia\u00e7\u00e3o - AssetProvider deve ser usado apenas como classe est\u00e1tica.\"\"\"\n        raise TypeError(\n            \"AssetProvider n\u00e3o deve ser instanciado. \"\n            \"Use AssetProvider.carregar_assets() e AssetProvider.get(key) diretamente.\"\n        )\n\n    @classmethod\n    def carregar_assets(cls):\n        \"\"\"Carrega e escala todos os assets do jogo.\"\"\"\n        if cls._loaded:\n            print(\"[AssetProvider] Assets j\u00e1 carregados anteriormente, pulando recarregamento.\")\n            return\n\n        base_dir = os.path.dirname(os.path.abspath(__file__))\n        try:\n            # FONTE\n            cls.ASSETS['font_press_start_2P'] = pygame.font.Font(os.path.join(base_dir, 'font', 'PressStart2P-Regular.ttf'), 24)\n\n            # MAP TILES\n            cls.ASSETS['grass_claro'] = pygame.transform.scale(\n                pygame.image.load(os.path.join(base_dir, 'maps', 'map1', 'titleset', 'grass1.png')).convert_alpha(),\n                (TAMANHO_QUADRADO, TAMANHO_QUADRADO)\n            )\n            cls.ASSETS['grass_escuro'] = pygame.transform.scale(\n                pygame.image.load(os.path.join(base_dir, 'maps', 'map1', 'titleset', 'grass2.png')).convert_alpha(),\n                (TAMANHO_QUADRADO, TAMANHO_QUADRADO)\n            )\n\n            #SCOREBOARD\n            cls.ASSETS['scoreboard'] = pygame.transform.scale(\n                pygame.image.load(os.path.join(base_dir, 'maps', 'map1', 'object', 'map_scoreboard1.png')).convert_alpha(),\n                (TAMANHO_QUADRADO*5, TAMANHO_QUADRADO*1.5)\n            )\n\n            cls.ASSETS['scoreboard_slot'] = pygame.transform.scale(\n                pygame.image.load(os.path.join(base_dir, 'maps', 'map1', 'object', 'player_block01.png')).convert_alpha(),\n                (TAMANHO_QUADRADO/1.8, TAMANHO_QUADRADO/1.6)\n            )\n\n            # CAIPORA\n            cls.ASSETS['caipora_attack'] = [\n                pygame.transform.scale(\n                    pygame.image.load(os.path.join(base_dir, 'characters', 'defense', 'caipora', f'caipora_attack{i}.png')).convert_alpha(),\n                    (TAMANHO_CAIPORA, TAMANHO_CAIPORA)\n                )\n                for i in range(1, 3)\n            ]\n\n            cls.ASSETS['caipora_projectile'] = pygame.transform.scale(\n                pygame.image.load(os.path.join(base_dir, 'characters', 'defense', 'caipora', 'caipora_arrow.png')).convert_alpha(),\n                (50, 20)\n            )\n\n            # BICHO PAP\u00c3O\n            bp_walk = [\n                pygame.image.load(os.path.join(base_dir, 'characters', 'enemies', 'bicho-papao', f'bp_walk{i}.png')).convert_alpha()\n                for i in range(1, 5)\n            ]\n            cls.ASSETS['bp_walk'] = [\n                pygame.transform.scale(pygame.transform.flip(img, True, False), (TAMANHO_BP, TAMANHO_BP))\n                for img in bp_walk\n            ]\n\n            bp_attack = [\n                pygame.image.load(os.path.join(base_dir, 'characters', 'enemies', 'bicho-papao', f'bp_attack{i}.png')).convert_alpha()\n                for i in range(1, 3)\n            ]\n            cls.ASSETS['bp_attack'] = [\n                pygame.transform.scale(pygame.transform.flip(img, True, False), (TAMANHO_BP, TAMANHO_BP))\n                for img in bp_attack\n            ]\n\n            # GUARAN\u00c1 (moeda) - carregar com o mesmo padr\u00e3o dos outros assets\n            cls.ASSETS['guarana_coin'] = pygame.transform.scale(\n                pygame.image.load(os.path.join(base_dir, 'maps', 'map1', 'object', 'guarana_coin.png')).convert_alpha(),\n                (40, 40)\n            )\n\n            # MENU PAUSA\n            cls.ASSETS.update({\n                # Fundo do menu pausa\n                'menu_pausa': pygame.image.load(\n                    os.path.join(base_dir, 'menu_pause', 'menu_pausa.png')\n                ).convert_alpha(),\n\n                # Bot\u00e3o M\u00daSICA\n                'btn_musica': pygame.transform.scale(\n                    pygame.image.load(os.path.join(base_dir, 'menu_pause', 'botao_musica.png')).convert_alpha(),\n                    (200, 60)  # Largura, altura\n                ),\n                'btn_musica_hover': pygame.transform.scale(\n                    pygame.image.load(os.path.join(base_dir, 'menu_pause', 'botao_musica_click.png')).convert_alpha(),\n                    (200, 60)\n                ),\n\n                # Bot\u00e3o EFEITO SONORO\n                'btn_efeito': pygame.transform.scale(\n                    pygame.image.load(os.path.join(base_dir, 'menu_pause', 'botao_efeitoSonoro.png')).convert_alpha(),\n                    (200, 60)\n                ),\n                'btn_efeito_hover': pygame.transform.scale(\n                    pygame.image.load(os.path.join(base_dir, 'menu_pause', 'botao_efeitoSonoro_click.png')).convert_alpha(),\n                    (200, 60)\n                ),\n\n                # Bot\u00e3o TUTORIAL\n                'btn_tutorial': pygame.transform.scale(\n                    pygame.image.load(os.path.join(base_dir, 'menu_pause', 'botao_tutorial.png')).convert_alpha(),\n                    (200, 60)\n                ),\n                'btn_tutorial_hover': pygame.transform.scale(\n                    pygame.image.load(os.path.join(base_dir, 'menu_pause', 'botao_tutorial_click.png')).convert_alpha(),\n                    (200, 60)\n                ),\n\n                # Bot\u00e3o Sair da Partida\n                'btn_sair': pygame.transform.scale(\n                    pygame.image.load(os.path.join(base_dir, 'menu_pause', 'botao_sair_partida.png')).convert_alpha(),\n                    (200, 60)\n                ),\n                'btn_sair_hover': pygame.transform.scale(\n                    pygame.image.load(os.path.join(base_dir, 'menu_pause', 'botao_sair_partida_click.png')).convert_alpha(),\n                    (200, 60)\n                ),\n\n                # Icone Som Normal\n                'icon_som': pygame.transform.scale(\n                    pygame.image.load(os.path.join(base_dir, 'menu_pause', 'icone_som_normal.png')).convert_alpha(),\n                    (40, 40)\n                ),\n                'icon_som_hover': pygame.transform.scale(\n                    pygame.image.load(os.path.join(base_dir, 'menu_pause', 'icone_som_click.png')).convert_alpha(),\n                    (40, 40)\n                ),\n\n                # Icone Som Mudo\n                'icon_mute': pygame.transform.scale(\n                    pygame.image.load(os.path.join(base_dir, 'menu_pause', 'icone_som_mute.png')).convert_alpha(),\n                    (40, 40)\n                ),\n\n                # Barra de volume\n                'barra_volume_mute': pygame.transform.scale(\n                    pygame.image.load(os.path.join(base_dir, 'menu_pause', 'barra_0.png')).convert_alpha(),\n                    (150, 20)\n                ),\n                'barra_volume_mute_houver': pygame.transform.scale(\n                    pygame.image.load(os.path.join(base_dir, 'menu_pause', 'barra_0_click.png')).convert_alpha(),\n                    (150, 20)\n                ),\n                'barra_volume_25': pygame.transform.scale(\n                    pygame.image.load(os.path.join(base_dir, 'menu_pause', 'barra_25.png')).convert_alpha(),\n                    (150, 20)\n                ),\n                'barra_volume_25_houver': pygame.transform.scale(\n                    pygame.image.load(os.path.join(base_dir, 'menu_pause', 'barra_25_click.png')).convert_alpha(),\n                    (150, 20)\n                ),\n                'barra_volume_50': pygame.transform.scale(\n                    pygame.image.load(os.path.join(base_dir, 'menu_pause', 'barra_50.png')).convert_alpha(),\n                    (150, 20)\n                ),\n                'barra_volume_50_houver': pygame.transform.scale(\n                    pygame.image.load(os.path.join(base_dir, 'menu_pause', 'barra_50_click.png')).convert_alpha(),\n                    (150, 20)\n                ),\n                'barra_volume_75': pygame.transform.scale(\n                    pygame.image.load(os.path.join(base_dir, 'menu_pause', 'barra_75.png')).convert_alpha(),\n                    (150, 20)\n                ),\n                'barra_volume_75_houver': pygame.transform.scale(\n                    pygame.image.load(os.path.join(base_dir, 'menu_pause', 'barra_75_click.png')).convert_alpha(),\n                    (150, 20)\n                ),\n                'barra_volume_100': pygame.transform.scale(\n                    pygame.image.load(os.path.join(base_dir, 'menu_pause', 'barra_100.png')).convert_alpha(),\n                    (150, 20)\n                ),\n                'barra_volume_100_houver': pygame.transform.scale(\n                    pygame.image.load(os.path.join(base_dir, 'menu_pause', 'barra_100_click.png')).convert_alpha(),\n                    (150, 20)\n                ),\n\n                # MENU CONFIGURA\u00c7\u00d5ES\n                'menu_config': pygame.image.load(\n                    os.path.join(base_dir, 'menu_config', 'menu_config.png')\n                ).convert_alpha(),\n                'btn_voltar': pygame.transform.scale(\n                    pygame.image.load(os.path.join(base_dir, 'menu_config', 'botao_voltar.png')).convert_alpha(),\n                    (200, 60)\n                ),\n                'btn_voltar_hover': pygame.transform.scale(\n                    pygame.image.load(os.path.join(base_dir, 'menu_config', 'botao_voltar_click.png')).convert_alpha(),\n                    (200, 60)\n                ),\n                'btn_salvar': pygame.transform.scale(\n                    pygame.image.load(os.path.join(base_dir, 'menu_config', 'botao_salvar.png')).convert_alpha(),\n                    (200, 60)\n                ),\n                'btn_salvar_hover': pygame.transform.scale(\n                    pygame.image.load(os.path.join(base_dir, 'menu_config', 'botao_salvar_click.png')).convert_alpha(),\n                    (200, 60)\n                ),\n\n                # MENU PRINCIPAL\n                'menu_principal': pygame.image.load(\n                    os.path.join(base_dir, 'menu', 'menu_screen', 'main_screen.png')\n                ).convert_alpha(),\n\n                # Bot\u00f5es do Menu Principal\n                'menu_btn_jogar': pygame.image.load(\n                    os.path.join(base_dir, 'menu', 'menu_screen', 'main_screen_button3.png')\n                ).convert_alpha(),\n                'menu_btn_jogar_hover': pygame.image.load(\n                    os.path.join(base_dir, 'menu', 'menu_screen', 'main_screen_button_click1.png')\n                ).convert_alpha(),\n\n                'menu_btn_loja': pygame.image.load(\n                    os.path.join(base_dir, 'menu', 'menu_screen', 'main_screen_button2.png')\n                ).convert_alpha(),\n                'menu_btn_loja_hover': pygame.image.load(\n                    os.path.join(base_dir, 'menu', 'menu_screen', 'main_screen_button_click2.png')\n                ).convert_alpha(),\n\n                'menu_btn_creditos': pygame.image.load(\n                    os.path.join(base_dir, 'menu', 'menu_screen', 'main_screen_button1.png')\n                ).convert_alpha(),\n                'menu_btn_creditos_hover': pygame.image.load(\n                    os.path.join(base_dir, 'menu', 'menu_screen', 'main_screen_button_click3.png')\n                ).convert_alpha(),\n\n                'menu_btn_config': pygame.image.load(\n                    os.path.join(base_dir, 'menu', 'menu_screen', 'botao_config.png')\n                ).convert_alpha(),\n                'menu_btn_config_hover': pygame.image.load(\n                    os.path.join(base_dir, 'menu', 'menu_screen', 'botao_config_click.png')\n                ).convert_alpha(),\n                })\n\n            cls._loaded = True\n            print(\"[AssetProvider] Assets carregados com sucesso.\")\n\n        except pygame.error as e:\n            print(f\"[AssetProvider] ERRO CR\u00cdTICO ao carregar assets: {e}\")\n            pygame.quit()\n            exit()\n\n    @classmethod\n    def is_loaded(cls) -&gt; bool:\n        \"\"\"Verifica se os assets j\u00e1 foram carregados.\"\"\"\n        return cls._loaded\n\n    @classmethod\n    def reload(cls):\n        \"\"\"For\u00e7a recarregamento de todos os assets (use com cautela).\"\"\"\n        cls._loaded = False\n        cls.ASSETS.clear()\n        cls.carregar_assets()\n\n    @classmethod\n    def get(cls, key):\n        \"\"\"M\u00e9todo helper para acessar um asset.\"\"\"\n        return cls.ASSETS.get(key)\n</code></pre>"},{"location":"PadroesDeProjeto/3.1.GoFsCriacionais/#3143-opinioes-dos-participantes","title":"3.1.4.3. Opini\u00f5es dos Participantes","text":"Caio Duarte <p>Achei um padr\u00e3o simples, \u00fatil para muitos projetos e contextos e f\u00e1cil de implementar. Acredito que ele se encaixou perfeitamente com o nosso contexto de assets.</p> Laryssa F\u00e9lix <p>  Percebi que o padr\u00e3o Singleton \u00e9 muito \u00fatil em situa\u00e7\u00f5es em que precisamos garantir que apenas uma inst\u00e2ncia de uma classe exista em todo o sistema, como no caso de gerenciamento de configura\u00e7\u00f5es, logs ou assets de um jogo. Ele traz praticidade e evita desperd\u00edcio de recursos, j\u00e1 que centraliza o acesso a um \u00fanico objeto. Por\u00e9m, considero importante us\u00e1-lo com cuidado se for aplicado de forma excessiva, pode acabar dificultando testes e aumentar o acoplamento do c\u00f3digo. Por isso, acredito que o Singleton deve ser usado apenas quando realmente faz sentido garantir uma \u00fanica inst\u00e2ncia, como no caso de provedores de recursos ou conex\u00f5es\u00a0globais.</p> Rafael Welz Schadt <p>Achei o Singleton simples, por\u00e9m muito \u00fatil. \u00c9 aplic\u00e1vel a quase todo o contexto do projeto, e ajuda muito em projetos de pequeno porte.</p> Victor Pontual Guedes Nobrega <p>Gostei do padr\u00e3o Singleton porque separa a l\u00f3gica de cria\u00e7\u00e3o da l\u00f3gica de uso, deixando o c\u00f3digo mais limpo e organizado. No contexto do jogo, ele foi essencial para garantir que os assets sejam carregados uma \u00fanica vez e compartilhados por todo o sistema, evitando duplica\u00e7\u00e3o de mem\u00f3ria e facilitando o acesso global aos recursos de forma segura e intuitiva atrav\u00e9s dos m\u00e9todos de classe.</p>"},{"location":"PadroesDeProjeto/3.1.GoFsCriacionais/#315-prototype","title":"3.1.5. Prototype","text":"<p>O padr\u00e3o Prototype \u00e9 um padr\u00e3o de projeto criacional que tem como objetivo criar novos objetos a partir da c\u00f3pia (clone) de inst\u00e2ncias existentes, em vez de criar novos objetos do zero.</p> <p>A inten\u00e7\u00e3o principal \u00e9 evitar o custo de criar objetos complexos diretamente e fornecer um mecanismo flex\u00edvel de duplica\u00e7\u00e3o, permitindo que o sistema copie objetos existentes (incluindo suas configura\u00e7\u00f5es internas) sem depender de suas classes concretas.</p>"},{"location":"PadroesDeProjeto/3.1.GoFsCriacionais/#3151-diagrama-uml","title":"3.1.5.1. Diagrama UML","text":"<p>O GoF Criacional Prototype foi aplicado ao projeto, no seguinte c\u00f3digo:</p> <p></p> Aplica\u00e7\u00e3o do Padr\u00e3o Prototype (Sistema de Cria\u00e7\u00e3o de Inimigos) <p>O trecho de c\u00f3digo a seguir, extra\u00eddo do arquivo principal de gerenciamento de prot\u00f3tipos de inimigos (<code>EnemyPrototype.py</code>) demonstra a implementa\u00e7\u00e3o do Padr\u00e3o Prototype atrav\u00e9s das classes <code>IEnemyPrototype</code>, <code>EnemyPrototypeRegistry</code> e <code>BichoPapaoPrototype</code>.</p> <p>Essa implementa\u00e7\u00e3o permite criar novas inst\u00e2ncias de inimigos atrav\u00e9s da clonagem de prot\u00f3tipos pr\u00e9-configurados, ao inv\u00e9s de instanciar diretamente as classes, proporcionando flexibilidade na cria\u00e7\u00e3o e configura\u00e7\u00e3o de diferentes tipos de inimigos.</p> <pre><code>from abc import ABC, abstractmethod\nfrom typing import Dict, Optional\n\nclass IEnemyPrototype(ABC):\n    \"\"\"Interface Prototype seguindo o padr\u00e3o GOF\"\"\"\n\n    @abstractmethod\n    def clone(self):\n        \"\"\"Clona o prototype atual retornando uma nova inst\u00e2ncia\"\"\"\n        pass\n\nclass EnemyPrototypeRegistry:\n    \"\"\"Registry que mant\u00e9m inst\u00e2ncias dos prototypes para clonagem\"\"\"\n\n    _prototypes: Dict[str, IEnemyPrototype] = {}\n\n    @classmethod\n    def register(cls, enemy_type: str, prototype: IEnemyPrototype):\n        \"\"\"Registra um prototype no registry\"\"\"\n        cls._prototypes[enemy_type] = prototype\n\n    @classmethod\n    def create(cls, enemy_type: str, grid_x: int, grid_y: int, **kwargs):\n        \"\"\"Cria uma nova inst\u00e2ncia clonando o prototype registrado\"\"\"\n        if enemy_type in cls._prototypes:\n            # Clona o prototype seguindo padr\u00e3o GOF\n            cloned_prototype = cls._prototypes[enemy_type].clone()\n\n            # Configura atributos espec\u00edficos se fornecidos\n            if kwargs:\n                cloned_prototype.configure(**kwargs)\n\n            # Cria a inst\u00e2ncia real do inimigo\n            if hasattr(cloned_prototype, 'create_enemy'):\n                return cloned_prototype.create_enemy(grid_x, grid_y)\n\n        return None\n\nclass EnemyFactory:\n    \"\"\"Factory que utiliza o registry para criar inimigos via prot\u00f3tipos\"\"\"\n\n    @classmethod\n    def create_enemy(cls, enemy_type: str, grid_x: int, grid_y: int, **kwargs):\n        return EnemyPrototypeRegistry.create(enemy_type, grid_x, grid_y, **kwargs)\n\n    @classmethod\n    def create_random_enemy(cls, grid_x: int, grid_y: int):\n        import random\n        types = EnemyPrototypeRegistry.get_types()\n        if types:\n            enemy_type = random.choice(types)\n            return cls.create_enemy(enemy_type, grid_x, grid_y)\n        return None\n</code></pre> Implementa\u00e7\u00e3o do Prototype Concreto (BichoPapao) <p>A classe <code>BichoPapaoPrototype</code> implementa a interface <code>IEnemyPrototype</code> e demonstra como o padr\u00e3o Prototype funciona na pr\u00e1tica. Ela mant\u00e9m os atributos configur\u00e1veis do inimigo e permite clonagem com diferentes configura\u00e7\u00f5es.</p> <pre><code>class BichoPapaoPrototype(IEnemyPrototype):\n    \"\"\"Concrete Prototype seguindo o padr\u00e3o GOF\"\"\"\n\n    def __init__(self, prototype=None):\n        \"\"\"Constructor que pode receber outro prototype para copiar\"\"\"\n        if prototype is not None:\n            # Copia campos do prototype existente\n            self.health = prototype.health\n            self.speed = prototype.speed\n            self.damage = prototype.damage\n            self.scare_range = prototype.scare_range\n            self.scare_duration = prototype.scare_duration\n            self.scare_cooldown = prototype.scare_cooldown\n        else:\n            # Valores padr\u00e3o\n            self.health = 400\n            self.speed = 6\n            self.damage = 30\n            self.scare_range = 100\n            self.scare_duration = 3000\n            self.scare_cooldown = 8000\n\n    def clone(self):\n        \"\"\"Implementa\u00e7\u00e3o do clone() seguindo padr\u00e3o GOF\"\"\"\n        return BichoPapaoPrototype(self)\n\n    def create_enemy(self, grid_x: int, grid_y: int):\n        \"\"\"Cria a inst\u00e2ncia real do BichoPapao com os atributos do prototype\"\"\"\n        enemy = BichoPapao(grid_x, grid_y)\n\n        # Aplica atributos do prototype\n        enemy.health = self.health\n        enemy.speed = self.speed\n        enemy.damage = self.damage\n        enemy.scare_range = self.scare_range\n        enemy.scare_duration = self.scare_duration\n        enemy.scare_cooldown = self.scare_cooldown\n\n        return enemy\n\n    def configure(self, **kwargs):\n        \"\"\"Permite configurar atributos espec\u00edficos\"\"\"\n        self.health = kwargs.get('health', self.health)\n        self.speed = kwargs.get('speed', self.speed)\n        self.damage = kwargs.get('damage', self.damage)\n</code></pre> Inicializa\u00e7\u00e3o e Uso do Sistema <p>O sistema \u00e9 inicializado no <code>GameMain.py</code> atrav\u00e9s da fun\u00e7\u00e3o <code>initialize_enemy_prototypes()</code>, que registra os prot\u00f3tipos dispon\u00edveis no registry. O uso pr\u00e1tico ocorre no <code>Level.py</code> onde inimigos s\u00e3o criados atrav\u00e9s da factory.</p> <pre><code># Inicializa\u00e7\u00e3o dos prot\u00f3tipos (GameMain.py)\ndef initialize_enemy_prototypes():\n    try:\n        from Model.Enemies.bichopapao import BichoPapaoPrototype\n\n        EnemyPrototypeRegistry.register(\"bicho_papao\", BichoPapaoPrototype())\n        print(\"[EnemyPrototype] Prot\u00f3tipos inicializados\")\n\n    except ImportError as e:\n        print(f\"[EnemyPrototype] ERRO: {e}\")\n\n# Uso pr\u00e1tico (Level.py)\n@classmethod\ndef inicializar_mapa(cls):\n    \"\"\"Inicializa o mapa l\u00f3gico e a popula\u00e7\u00e3o inicial.\"\"\"\n    cls.MAPA_LOGICO = [[0] * NUM_COLUNAS for _ in range(NUM_LINHAS)] \n\n    # Cria\u00e7\u00e3o de inimigo usando o padr\u00e3o Prototype\n    linha_bp = random.randint(0, NUM_LINHAS - 1)\n    EnemyFactory.create_enemy(\"bicho_papao\", NUM_COLUNAS - 1, linha_bp)\n</code></pre> <p>Portanto, assim ficou modelado em UML, o padr\u00e3o Prototype no c\u00f3digo do jogo. Clique aqui para acessar</p> <p></p> <p>O diagrama acima ilustra a arquitetura de classes respons\u00e1vel pela cria\u00e7\u00e3o de inimigos no jogo, evidenciando como o Padr\u00e3o de Projeto Prototype foi aplicado para permitir a clonagem e configura\u00e7\u00e3o flex\u00edvel de diferentes tipos de entidades inimigas atrav\u00e9s de prot\u00f3tipos pr\u00e9-configurados.</p> <p>No topo, encontra-se a classe <code>EnemyFactory</code>, que atua como o cliente principal do padr\u00e3o. Ela possui m\u00e9todos como <code>create_enemy()</code> e <code>create_random_enemy()</code>, que delegam a cria\u00e7\u00e3o para o registry de prot\u00f3tipos, mantendo uma interface simples e desacoplada para os consumidores do sistema.</p> <p>Logo abaixo, a classe <code>EnemyPrototypeRegistry</code> funciona como o gerenciador centralizado de todos os prot\u00f3tipos dispon\u00edveis. Ela define funcionalidades essenciais, como:</p> <ul> <li><code>_prototypes</code>: dicion\u00e1rio que armazena as inst\u00e2ncias dos prot\u00f3tipos registrados.  </li> <li><code>register()</code>: m\u00e9todo para cadastrar novos tipos de prot\u00f3tipos no sistema.  </li> <li><code>create()</code>: m\u00e9todo que localiza o prot\u00f3tipo apropriado e executa sua clonagem.  </li> <li><code>get_types()</code>: m\u00e9todo que retorna os tipos de inimigos dispon\u00edveis para cria\u00e7\u00e3o.</li> </ul> <p>A interface <code>IEnemyPrototype</code> estabelece o contrato base para todos os prot\u00f3tipos, definindo o m\u00e9todo <code>clone()</code> que deve ser implementado pelas classes concretas. Essa abstra\u00e7\u00e3o garante que o registry possa trabalhar com qualquer tipo de prot\u00f3tipo sem conhecer suas especificidades.</p> <p>As classes derivadas de <code>IEnemyPrototype</code> representam os prot\u00f3tipos espec\u00edficos de cada tipo de inimigo:</p> <ul> <li><code>BichoPapaoPrototype</code>: implementa a clonagem do BichoPapao, mantendo atributos configur\u00e1veis como <code>health</code>, <code>speed</code>, <code>damage</code>, <code>scare_range</code>, <code>scare_duration</code> e <code>scare_cooldown</code>. Possui m\u00e9todos especializados como <code>create_enemy()</code> para gerar a inst\u00e2ncia final e <code>configure()</code> para personaliza\u00e7\u00e3o de atributos.</li> </ul> <p>A classe <code>BichoPapao</code> representa o produto final criado pelo prot\u00f3tipo, sendo uma entidade concreta do jogo que herda de <code>Enemy</code>. Ela cont\u00e9m toda a l\u00f3gica espec\u00edfica do comportamento do Bicho-Pap\u00e3o, incluindo:</p> <ul> <li>Atributos de posicionamento (<code>grid_x</code>, <code>grid_y</code>, <code>pos_x</code>, <code>pos_y</code>)</li> <li>Recursos visuais (<code>walk_animation</code>, <code>attack_animation</code>, <code>current_frame</code>)  </li> <li>Comportamentos especializados (<code>update()</code>, <code>attack()</code>, <code>_scare_defense()</code>)</li> </ul> <p>Essa organiza\u00e7\u00e3o reflete o uso do Prototype aliado \u00e0 separa\u00e7\u00e3o de responsabilidades:</p> <ul> <li>O <code>EnemyFactory</code> abstrai a complexidade de cria\u00e7\u00e3o para os clientes.  </li> <li>O <code>EnemyPrototypeRegistry</code> centraliza o gerenciamento dos prot\u00f3tipos dispon\u00edveis.</li> <li>Cada prot\u00f3tipo encapsula a l\u00f3gica de clonagem e configura\u00e7\u00e3o de seu tipo espec\u00edfico.</li> <li>Os produtos finais implementam o comportamento real das entidades no jogo.</li> </ul> <p>Em resumo, o diagrama mostra uma arquitetura flex\u00edvel e extens\u00edvel, em que o Prototype (<code>IEnemyPrototype</code> e suas implementa\u00e7\u00f5es) permite a cria\u00e7\u00e3o eficiente de inimigos atrav\u00e9s de clonagem, enquanto o Registry centraliza o gerenciamento e a Factory oferece uma interface simplificada, favorecendo a reutiliza\u00e7\u00e3o de configura\u00e7\u00f5es e o baixo acoplamento entre os m\u00f3dulos do sistema.</p>"},{"location":"PadroesDeProjeto/3.1.GoFsCriacionais/#3152-opnioes-dos-participantes","title":"3.1.5.2. Opni\u00f5es dos Participantes","text":"<p>A elabora\u00e7\u00e3o desta etapa foi realizada de forma colaborativa em reuni\u00e3o pelo Discord, n\u00e3o gravada, onde os todos membros designados estiveram presentes e participaram ativamente da discuss\u00e3o/elabora\u00e7\u00e3o. O processo da execu\u00e7\u00e3o do c\u00f3digo foi feito no Visual Studio Code e a elabora\u00e7\u00e3o da UML foi feita no Draw.io, ferramenta que possibilitou a cria\u00e7\u00e3o e edi\u00e7\u00e3o simult\u00e2nea do diagrama, garantindo integra\u00e7\u00e3o e alinhamento entre os integrantes.</p> <p>Ao longo da atividade, cada integrante trouxe ideias e feedbacks que ajudaram a consolidar um resultado alinhado com a vis\u00e3o do grupo como um todo. Esse processo coletivo contribuiu tanto para a consist\u00eancia do diagrama quanto para o fortalecimento da colabora\u00e7\u00e3o na equipe.</p> Danielle Soares <p>Achei o Prototype simples de entender e, para mim, foi o padr\u00e3o mais f\u00e1cil de identificar no nosso c\u00f3digo do jogo, j\u00e1 que o spawn de mobs \u00e9 um exemplo claro de clonagem de objetos. Nesse sentido, a \u00fanica dificuldade foi na implementa\u00e7\u00e3o do c\u00f3digo, mas acredito que o trabalho em equipe facilitou bastante essa parte. A elabora\u00e7\u00e3o do diagrama UML tamb\u00e9m foi bem tranquila.</p> Enzo Emir <p>No in\u00edcio, fiquei em d\u00favida sobre como implementar esse padr\u00e3o no projeto. No entanto, ap\u00f3s conversar com o restante da equipe e discutir poss\u00edveis abordagens, a ideia de aplic\u00e1-lo nas entidades tornou-se muito mais compreens\u00edvel.Essa troca de ideias ajudou a visualizar melhor os benef\u00edcios do padr\u00e3o e a forma como ele poderia tornar o c\u00f3digo mais organizado e flex\u00edvel</p> Leticia Arisa <p>Sobre o Prototype, eu achei bem interessante e f\u00e1cil de entender. Ele ajuda a criar c\u00f3pias de objetos de forma pr\u00e1tica, sem precisar construir tudo do zero. No nosso projeto, isso ficou claro no spawn de mobs, que usa clonagem de um modelo base. Achei legal ver como esse padr\u00e3o facilita o c\u00f3digo e deixa o desenvolvimento mais r\u00e1pido.</p> Marcelo Makoto <p>No come\u00e7o eu fiquei confuso sobre como implementar o padr\u00e3o Prototype no nosso projeto, mas, quando estudei melhor, foi relativamente simples de implement\u00e1-lo. Ele tornou a cria\u00e7\u00e3o de entidades id\u00eanticas muito mais intuitiva e pr\u00e1tica, sendo essencial para o futuro do projeto.</p> Maria Eduarda Andrade <p>Eu acho que o padr\u00e3o Prototype \u00e9 bem \u00fatil quando precisamos criar c\u00f3pias de objetos rapidamente, sem ter que recriar tudo do zero. Ele funciona bem em situa\u00e7\u00f5es como jogos, onde voc\u00ea pode \"clonar\" um n\u00edvel e s\u00f3 fazer ajustes pequenos. No come\u00e7o, pode ser um pouco confuso, igual o que aconteceu com o Iterator, mas depois que a gente entende a ideia de \"clonar\" objetos, fica muito mais f\u00e1cil e eficiente de usar.</p>"},{"location":"PadroesDeProjeto/3.1.GoFsCriacionais/#3153-video-demonstrativo","title":"3.1.5.3. V\u00eddeo Demonstrativo","text":"<p>Foi gravado, na plataforma do Microsoft Teams, uma reuni\u00e3o para a modelagem UML do padr\u00e3o Prototype e a execu\u00e7\u00e3o do c\u00f3digo al\u00e9m da explica\u00e7\u00e3o do mesmo. Clique aqui para acessar.</p> <p><p>Fonte: Equipe do Projeto, 2025.</p></p>"},{"location":"PadroesDeProjeto/3.1.GoFsCriacionais/#316-referencias-bibliograficas","title":"3.1.6. Refer\u00eancias Bibliogr\u00e1ficas","text":"<p>1. GAMMA, Erich et al. Padr\u00f5es de Projeto: Solu\u00e7\u00f5es Reutiliz\u00e1veis de Software Orientado a Objetos. Tradu\u00e7\u00e3o de C. F. Lucena e F. S. C. da Silva. Porto Alegre: Bookman, 2007. (T\u00edtulo original: Design Patterns: Elements of Reusable Object-Oriented Software).</p>"},{"location":"PadroesDeProjeto/3.1.GoFsCriacionais/#317-historico-de-versoes","title":"3.1.7. Hist\u00f3rico de Vers\u00f5es \ud83d\udcc5","text":"Vers\u00e3o Data Descri\u00e7\u00e3o Autor(es) Revisor(es) <code>0.1</code> 23/10/2025 Adicionando Documenta\u00e7\u00e3o GoF Criacional Caio Duarte, Laryssa F\u00e9lix Victor Pontual <code>0.2</code> 23/10/2025 Corre\u00e7\u00e3o de numera\u00e7\u00e3o, formata\u00e7\u00e3o do c\u00f3digo, adi\u00e7\u00e3o de v\u00eddeo e melhorias na documenta\u00e7\u00e3o Victor Pontual Maria Eduarda Andrade <code>0.3</code> 24/10/2025 Adicionando Documenta\u00e7\u00e3o GoF Criacional Danielle Soares, Enzo Emir, Leticia Arisa, Marcelo Makoto, Maria Eduarda -"},{"location":"PadroesDeProjeto/3.2.GoFsEstruturais/","title":"3.2. M\u00f3dulo Padr\u00f5es de Projeto GoFs Estruturais","text":""},{"location":"PadroesDeProjeto/3.2.GoFsEstruturais/#321-introducao","title":"3.2.1. Introdu\u00e7\u00e3o","text":"<p>Os padr\u00f5es de projeto Estruturais s\u00e3o focados em como classes e objetos podem ser compostos para formar estruturas mais complexas e flex\u00edveis dentro de um sistema. O objetivo principal desses padr\u00f5es \u00e9 garantir que as rela\u00e7\u00f5es entre os objetos sejam extens\u00edveis, desacopladas e eficientes, permitindo a cria\u00e7\u00e3o de sistemas mais robustos e f\u00e1ceis de modificar. Eles descrevem formas de organizar as classes e objetos em um software, facilitando a constru\u00e7\u00e3o de estruturas maiores e mais funcionais [1] [2] [3] [4].</p> <p>Esses padr\u00f5es s\u00e3o fundamentais para a cria\u00e7\u00e3o de interfaces e implementa\u00e7\u00f5es, especialmente quando se trabalha com heran\u00e7a, e ajudam a estabelecer uma organiza\u00e7\u00e3o eficiente das entidades do sistema. Ao organizar as classes e objetos, eles promovem o desacoplamento, permitindo que mudan\u00e7as em uma parte do sistema n\u00e3o afetem drasticamente outras partes. Al\u00e9m disso, esses padr\u00f5es facilitam a comunica\u00e7\u00e3o entre as entidades, tornando o c\u00f3digo mais flex\u00edvel, adapt\u00e1vel e mais f\u00e1cil de entender e manter [5]. </p>"},{"location":"PadroesDeProjeto/3.2.GoFsEstruturais/#participantes","title":"Participantes","text":"<p><p>Tabela 1: Participantes</p></p> Nome Fun\u00e7\u00e3o Data Hora Caio Duarte GoF Estrutural - Composite 22/10/2025 20:00 Danielle Soares GoF Estrutural - Facade 22/10/2025 11:00 Enzo Emir GoF Estrutural - Facade 22/10/2025 11:00 Laryssa F\u00e9lix GoF Estrutural - Composite 22/10/2025 20:00 Leticia Arisa GoF Estrutural - Facade 22/10/2025 11:00 Marcelo Makoto GoF Estrutural - Composite 22/10/2025 20:00 Maria Eduarda GoF Estrutural - Composite 22/10/2025 20:00 Rafael Welz GoF Estrutural - Composite 22/10/2025 20:00 Victor Pontual GoF Estrutural - Facade 20/10/2025 11:00 <p><p>Fonte: Equipe do Projeto, 2025.</p></p>"},{"location":"PadroesDeProjeto/3.2.GoFsEstruturais/#322-metodologia","title":"3.2.2. Metodologia","text":"<p>A pesquisa e o desenvolvimento do estudo dos Padr\u00f5es de Projeto Comportamentais foram conduzidos seguindo uma abordagem pr\u00e1tica e colaborativa, focada na aplica\u00e7\u00e3o real dos conceitos em um sistema de software existente.</p>"},{"location":"PadroesDeProjeto/3.2.GoFsEstruturais/#3221-revisao-e-selecao-de-padroes","title":"3.2.2.1. Revis\u00e3o e Sele\u00e7\u00e3o de Padr\u00f5es","text":"<p>Iniciou-se com a revis\u00e3o do cat\u00e1logo de Padr\u00f5es de Projeto Comportamentais da \"Gang of Four\" (GoF), conforme introduzido na se\u00e7\u00e3o anterior. Foram selecionados os padr\u00f5es mais relevantes para resolver problemas de intera\u00e7\u00e3o e comunica\u00e7\u00e3o observados no software interno do jogo, que est\u00e1 hospedado em um reposit\u00f3rio de c\u00f3digo separado.</p>"},{"location":"PadroesDeProjeto/3.2.GoFsEstruturais/#3222-aplicacao-e-implementacao","title":"3.2.2.2. Aplica\u00e7\u00e3o e Implementa\u00e7\u00e3o","text":"<p>Os padr\u00f5es de projeto selecionados (Facade e Composite) foram implementados diretamente no c\u00f3digo-fonte do software interno do jogo. Esta etapa foi crucial para testar a efic\u00e1cia dos padr\u00f5es na redu\u00e7\u00e3o do acoplamento, melhoria da legibilidade e aumento da flexibilidade do sistema.</p>"},{"location":"PadroesDeProjeto/3.2.GoFsEstruturais/#3223-modelagem-e-documentacao-uml","title":"3.2.2.3. Modelagem e Documenta\u00e7\u00e3o UML","text":"<p>Para documentar visualmente a estrutura e a aplica\u00e7\u00e3o dos padr\u00f5es, o software Draw.io foi utilizado para a cria\u00e7\u00e3o de Diagramas UML (Linguagem de Modelagem Unificada). Esses diagramas (principalmente de Classe e/ou Sequ\u00eancia) serviram para mapear as novas intera\u00e7\u00f5es e rela\u00e7\u00f5es entre os objetos resultantes da aplica\u00e7\u00e3o dos padr\u00f5es Comportamentais.</p>"},{"location":"PadroesDeProjeto/3.2.GoFsEstruturais/#3224-demonstracao-e-colaboracao","title":"3.2.2.4. Demonstra\u00e7\u00e3o e Colabora\u00e7\u00e3o","text":"<p>Para garantir a transpar\u00eancia do processo e documentar a participa\u00e7\u00e3o de cada membro, as sess\u00f5es de desenvolvimento, discuss\u00f5es t\u00e9cnicas e demonstra\u00e7\u00f5es de execu\u00e7\u00e3o do c\u00f3digo foram gravadas por meio da plataforma Microsoft Teams. Essas grava\u00e7\u00f5es serviram como artefatos de evid\u00eancia, demonstrando a aplica\u00e7\u00e3o pr\u00e1tica dos padr\u00f5es, o fluxo de trabalho colaborativo e a contribui\u00e7\u00e3o individual dos membros da equipe na solu\u00e7\u00e3o dos problemas de design.</p>"},{"location":"PadroesDeProjeto/3.2.GoFsEstruturais/#323-composite","title":"3.2.3. Composite","text":"<p>O padr\u00e3o Composite \u00e9 um padr\u00e3o de projeto estrutural que visa compor objetos em estruturas de \u00e1rvore para representar hierarquias \"parte-todo\".</p> <p>A inten\u00e7\u00e3o principal \u00e9 permitir que os clientes (c\u00f3digo que utiliza a estrutura) tratem objetos individuais e composi\u00e7\u00f5es de objetos de maneira uniforme.</p>"},{"location":"PadroesDeProjeto/3.2.GoFsEstruturais/#3231-diagrama-uml","title":"3.2.3.1. Diagrama UML","text":"<p>O GoF Estrutural Composite foi aplicado ao projeto, no seguinte c\u00f3digo:</p> <p></p> <p><p>Fonte: Equipe do Projeto, 2025.</p></p> Aplica\u00e7\u00e3o do Padr\u00e3o Composite (Gerenciamento de Sprites) <p>O trecho de c\u00f3digo a seguir, extra\u00eddo do arquivo principal de gerenciamento de sprites (<code>sprite_groups.py</code>) demonstra a implementa\u00e7\u00e3o do Padr\u00e3o Composite atrav\u00e9s da classe <code>SpriteComposite</code>. Essa classe unifica a gest\u00e3o de diversos grupos de sprites (<code>caiporas</code>, <code>inimigos</code>, <code>projeteis</code>, etc.) permitindo que opera\u00e7\u00f5es como <code>update()</code> e <code>draw()</code> sejam executadas de forma transparente em todos os grupos de uma s\u00f3 vez.</p> <pre><code>import pygame\nfrom Template.UIConfigs import *\n\nclass SpriteComposite:\n    \"\"\"Gerenciador unificado de todos os grupos de sprites do jogo.\"\"\"\n    def __init__(self):\n        self.caiporas = pygame.sprite.Group()\n        self.inimigos = pygame.sprite.Group()\n        self.projeteis = pygame.sprite.Group()\n        self.guaranas = pygame.sprite.Group()\n\n        self._all_groups = [\n            self.projeteis,\n            self.caiporas,\n            self.inimigos,\n            self.guaranas\n        ]\n\n    def update(self):\n        for group in self._all_groups:\n            group.update()\n\n    def draw(self, surface):\n        for group in self._all_groups:\n            group.draw(surface)\n\n    def reset(self):\n        for group in self._all_groups:\n            group.empty()\n\nsprite_manager = SpriteComposite()\n</code></pre> <p>Portanto, assim ficou modelado em UML, o padr\u00e3o Composite no c\u00f3digo do jogo. Clique aqui para acessar:</p> <p></p> <p><p>Fonte: Caio Duarte, Laryssa F\u00e9lix, Marcelo Matoko, Maria Eduarda, Rafael Schadt, 2025.</p></p> <p>O diagrama acima ilustra a arquitetura de classes respons\u00e1vel pelo gerenciamento de sprites no jogo, evidenciando como o Padr\u00e3o de Projeto Composite foi aplicado para unificar e organizar diferentes tipos de entidades (como personagens, inimigos, proj\u00e9teis e defesas) sob uma mesma estrutura de controle.</p> <p>No topo, encontra-se a classe <code>SpriteComposite</code>, que atua como o componente composto principal. Ela agrega diversos grupos de sprites \u2014 como <code>caiporas</code>, <code>inimigos</code>, <code>projeteis</code> e <code>guaranas</code> \u2014, todos representados por inst\u00e2ncias de <code>pygame.sprite.Group</code>. Essa classe possui m\u00e9todos como <code>update()</code> e <code>draw()</code>, que propagam as opera\u00e7\u00f5es de atualiza\u00e7\u00e3o e renderiza\u00e7\u00e3o para todos os grupos internos, mantendo a hierarquia de forma transparente.</p> <p>Logo abaixo, a classe <code>Entity</code> funciona como a classe base abstrata para todos os objetos que possuem representa\u00e7\u00e3o visual e comportamento no jogo. Ela define atributos comuns, como:</p> <ul> <li><code>image</code>: superf\u00edcie gr\u00e1fica da entidade.  </li> <li><code>rect</code>: posi\u00e7\u00e3o e \u00e1rea de colis\u00e3o.  </li> <li><code>health</code>: quantidade de vida da entidade.  </li> <li><code>update()</code>: m\u00e9todo gen\u00e9rico para atualiza\u00e7\u00e3o, que pode ser sobrescrito pelas subclasses.</li> </ul> <p>As classes derivadas de <code>Entity</code> representam os tipos espec\u00edficos de entidades do jogo, sendo elas:</p> <ul> <li><code>Defesa</code>: define estruturas defensivas com atributos de custo, estado atual e comportamento de bloqueio.  </li> <li><code>Guarana</code>: representa a moeda do jogo, possuindo atributos de velocidade, imagem e m\u00e9todo de colis\u00e3o (<code>collide()</code>).  </li> <li><code>Arrow</code>: modela flechas ou proj\u00e9teis inimigos, com propriedades de dano e trajet\u00f3ria.  </li> <li><code>Enemies</code>: classe gen\u00e9rica para inimigos, contendo l\u00f3gica de movimento, estado e ataque.</li> </ul> <p>Al\u00e9m disso, h\u00e1 classes especializadas que herdam dessas entidades principais:</p> <ul> <li><code>Caipora</code>: herda de <code>Defesa</code> e adiciona comportamentos espec\u00edficos, como anima\u00e7\u00f5es, ataques e controle de tempo de a\u00e7\u00e3o.  </li> <li><code>BichoPapao</code>: herda de <code>Enemies</code> e especializa os par\u00e2metros de dano, velocidade e anima\u00e7\u00f5es de ataque.</li> </ul> <p>Essa organiza\u00e7\u00e3o reflete o uso do Composite aliado \u00e0 heran\u00e7a hier\u00e1rquica:</p> <ul> <li>O <code>SpriteComposite</code> orquestra todos os grupos de entidades do jogo.  </li> <li>Cada entidade, derivada de <code>Entity</code>, atua como um componente individual dentro dessa estrutura unificada.</li> </ul> <p>Em resumo, o diagrama mostra uma hierarquia bem definida e extens\u00edvel, em que o Composite (<code>SpriteComposite</code>) gerencia m\u00faltiplos objetos (entidades e subclasses) como se fossem um \u00fanico conjunto, favorecendo a coes\u00e3o e o baixo acoplamento entre os m\u00f3dulos do sistema.</p>"},{"location":"PadroesDeProjeto/3.2.GoFsEstruturais/#3232-opnioes-dos-participantes","title":"3.2.3.2. Opni\u00f5es dos Participantes","text":"<p>A elabora\u00e7\u00e3o desta etapa foi realizada de forma colaborativa em reuni\u00e3o pelo Discord, n\u00e3o gravada,  onde os tr\u00eas membros designados estiveram presentes e participaram ativamente da discuss\u00e3o/elabora\u00e7\u00e3o. O processo da execu\u00e7\u00e3o do c\u00f3digo foi feito no Visual Studio Code e a elabora\u00e7\u00e3o da UML foi feita no Draw.io, ferramenta que possibilitou a cria\u00e7\u00e3o e edi\u00e7\u00e3o simult\u00e2nea do diagrama, garantindo integra\u00e7\u00e3o e alinhamento entre os integrantes.  </p> <p>Ao longo da atividade, cada integrante trouxe ideias e feedbacks que ajudaram a consolidar um resultado alinhado com a vis\u00e3o do grupo como um todo. Esse processo coletivo contribuiu tanto para a consist\u00eancia do diagrama quanto para o fortalecimento da colabora\u00e7\u00e3o na equipe.</p> Caio Duarte <p>No in\u00edcio, achei o padr\u00e3o Composite um pouco confuso de entender, mas com a ajuda dos meus colegas consegui compreender melhor como ele funciona e de que forma poderia ser aplicado ao nosso projeto. No final, percebi que \u00e9 um padr\u00e3o muito interessante e \u00fatil para organizar a estrutura do c\u00f3digo, n\u00e3o s\u00f3 no nosso projeto, mas em praticamente qualquer outro que exija uma hierarquia bem definida entre objetos.</p> Laryssa F\u00e9lix <p>Assim que comecei a explorar este conte\u00fado achei um pouco abstrato, mas ap\u00f3s ver exemplos pr\u00e1ticos que tudo come\u00e7ou a fazer sentido. Percebi que esse padr\u00e3o \u00e9 muito \u00fatil para organizar as sprites em estruturas hier\u00e1rquicas, o que deixou nosso c\u00f3digo mais limpo e f\u00e1cil de manter.</p> Marcelo Matoko <p>No come\u00e7o, eu tive um pouco de dificuldade em entender como o Composite funciona e como implement\u00e1-lo no projeto. Por\u00e9m, ao estudar mais sobre o assunto e pesquisar por exemplos, a implementa\u00e7\u00e3o do Composite se tornou mais simples e ajudou a estruturar os sprites das entidades de uma forma mais organizada e funcional. Isso ajudou a organizar parte do projeto e deix\u00e1-lo mais leg\u00edvel.</p> Maria Eduarda Andrade <p>Assim como em todo come\u00e7o, eu me perdi um pouco em como aplicar o Composite dentro da vis\u00e3o do nosso projeto. Depois de algumas discuss\u00f5es e pesquisas com a equipe, percebi que ele seria muito \u00fatil para organizar a estrutura do c\u00f3digo e dar mais clareza ao que est\u00e1vamos construindo. No fim, o padr\u00e3o ajudou a tratar partes do jogo como um todo, deixando a arquitetura mais limpa e alinhada aos princ\u00edpios do pr\u00f3prio Composite.</p> Rafael Schadt <p>De fato, no come\u00e7o, o padr\u00e3o Composite me pareceu um exagero de abstra\u00e7\u00e3o. Achei que a complexidade de criar uma interface comum s\u00f3 para for\u00e7ar o tratamento uniforme de objetos simples e compostos era desnecess\u00e1ria para o nosso caso. Pensei que uma estrutura de classes mais direta j\u00e1 resolveria. Contudo, ao longo da implementa\u00e7\u00e3o e conforme a hierarquia de objetos do projeto foi crescendo, percebi que essa \"complica\u00e7\u00e3o\" inicial se tornou a nossa maior aliada. Hoje, vejo que \u00e9 um padr\u00e3o essencial para manter a escalabilidade e a clareza do c\u00f3digo em qualquer projeto que envolva uma estrutura de \u00e1rvore ou composi\u00e7\u00e3o, provando que a complexidade inicial valeu a pena pela organiza\u00e7\u00e3o final.</p>"},{"location":"PadroesDeProjeto/3.2.GoFsEstruturais/#3233-video-demonstrativo","title":"3.2.3.3. V\u00eddeo Demonstrativo","text":"<p>Foi gravado, na plataforma do Microsoft Teams, uma reuni\u00e3o para a modelagem UML do padr\u00e3o Composite e a execu\u00e7\u00e3o do c\u00f3digo al\u00e9m da explica\u00e7\u00e3o do mesmo. Clique aqui para acessar.</p>"},{"location":"PadroesDeProjeto/3.2.GoFsEstruturais/#324-facade","title":"3.2.4. Facade","text":"<p>O padr\u00e3o Facade (Fachada) \u00e9 um padr\u00e3o de projeto estrutural do Gang of Four (GoF) que visa simplificar a intera\u00e7\u00e3o com sistemas complexos, fornecendo uma interface unificada para um conjunto de classes, bibliotecas ou subsistemas inteiros.</p> <p>Em vez de o c\u00f3digo cliente precisar conhecer e interagir diretamente com as partes internas e detalhadas do sistema, ele se comunica apenas com a fachada, que encapsula e coordena as chamadas para os componentes corretos. Assim, o objetivo principal \u00e9 esconder a complexidade interna e reduzir o acoplamento entre o cliente e o sistema.</p>"},{"location":"PadroesDeProjeto/3.2.GoFsEstruturais/#3241-estrutura-em-codigo","title":"3.2.4.1. Estrutura em c\u00f3digo","text":"<p>O GoF Estrutural Facade foi aplicado ao projeto, no seguinte c\u00f3digo: </p> <p></p> Aplica\u00e7\u00e3o do Padr\u00e3o Facade (Gerenciamento de Input e Renderiza\u00e7\u00e3o) <p>Os trechos a seguir, extra\u00eddos dos arquivos InputHandler.py e ViewRenderer.py, demonstram a aplica\u00e7\u00e3o do Padr\u00e3o de Projeto Facade no projeto. As classes InputHandler e ViewRenderer encapsulam a complexidade dos sistemas de entrada e renderiza\u00e7\u00e3o, oferecendo interfaces simplificadas e unificadas para o restante do jogo. Com isso, o c\u00f3digo cliente n\u00e3o precisa lidar diretamente com eventos do Pygame nem com a l\u00f3gica de transi\u00e7\u00e3o entre telas, mantendo o baixo acoplamento e a alta coes\u00e3o.</p> <pre><code>import pygame\nfrom typing import Callable, Dict, Optional\n\nclass InputHandler:\n    \"\"\"\n    Facade respons\u00e1vel por capturar, distribuir e processar eventos de entrada.\n    Esconde a complexidade do sistema de input do Pygame.\n    \"\"\"\n    _global_handlers: Dict[str, Callable] = {}\n    _keys_pressed: Dict[int, bool] = {}\n    _mouse_buttons: Dict[int, bool] = {}\n    _mouse_pos: tuple = (0, 0)\n    _input_enabled = True\n\n    @classmethod\n    def inicializar(cls):\n        \"\"\"Inicializa o Facade de Input.\"\"\"\n        cls._global_handlers.clear()\n        cls._keys_pressed.clear()\n        print(\"[InputHandler] Facade de Input inicializado\")\n\n    @classmethod\n    def process_events(cls) -&gt; bool:\n        \"\"\"Interface simplificada para processar todos os eventos.\"\"\"\n        if not cls._input_enabled:\n            pygame.event.clear()\n            return True\n\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                return False\n            cls._atualizar_estado(event)\n            if cls._processar_handlers_globais(event):\n                continue\n            cls._distribuir_evento(event)\n        return True\n\n    @classmethod\n    def setup_default_shortcuts(cls):\n        \"\"\"Registra atalhos globais padr\u00e3o (ex: ESC para menus e pausas).\"\"\"\n        def handler_esc(event):\n            if event.type == pygame.KEYDOWN and event.key == pygame.K_ESCAPE:\n                print(\"[InputHandler] ESC pressionado \u2014 alternando telas ou modais\")\n                return True\n            return False\n        cls._global_handlers[\"esc\"] = handler_esc\n</code></pre> <pre><code>import pygame\nfrom typing import Dict, Optional\nfrom View.Interfaces import IScreen\n\nclass ViewRenderer:\n    \"\"\"\n    Facade respons\u00e1vel por gerenciar telas, transi\u00e7\u00f5es e renderiza\u00e7\u00e3o.\n    Esconde a complexidade do sistema de telas e recursos gr\u00e1ficos.\n    \"\"\"\n    _current_screen: Optional[IScreen] = None\n    _current_screen_name: Optional[str] = None\n    _all_screens: Dict[str, IScreen] = {}\n    FONTE = None\n\n    @classmethod\n    def inicializar(cls):\n        \"\"\"Inicializa fontes e prepara o sistema de renderiza\u00e7\u00e3o.\"\"\"\n        cls.FONTE = pygame.font.SysFont('Arial', 30)\n        print(\"[ViewRenderer] Fontes inicializadas\")\n\n    @classmethod\n    def add_screen(cls, name: str, screen: IScreen):\n        \"\"\"Adiciona uma nova screen ao sistema.\"\"\"\n        cls._all_screens[name] = screen\n        print(f\"[ViewRenderer] Screen '{name}' registrada\")\n\n    @classmethod\n    def transition_to(cls, name: str):\n        \"\"\"Gerencia transi\u00e7\u00e3o entre screens (fecha a atual e abre a nova).\"\"\"\n        if cls._current_screen:\n            cls._current_screen.close_screen()\n        cls._current_screen = cls._all_screens.get(name)\n        if cls._current_screen:\n            cls._current_screen.open_screen()\n            cls._current_screen_name = name\n            print(f\"[ViewRenderer] Transi\u00e7\u00e3o para '{name}' conclu\u00edda\")\n\n    @classmethod\n    def render(cls, surface: pygame.Surface):\n        \"\"\"Renderiza a screen e modais ativos.\"\"\"\n        from Core.ScreenManager import ScreenManager\n        if cls._current_screen:\n            cls._current_screen.draw(surface)\n        for modal in ScreenManager._modals:\n            modal.draw(surface)\n</code></pre> <p>Com a utiliza\u00e7\u00e3o dessas fachadas:</p> <ul> <li> <p><code>InputHandler</code>: atua como uma fachada para o subsistema de eventos do Pygame. Ele esconde a complexidade de capturar a fila de eventos, verificar o tipo de cada evento (teclado, mouse), e decidir para qual componente o evento deve ser enviado.</p> </li> <li> <p><code>ViewRenderer</code>: serve como uma fachada para todo o subsistema de visualiza\u00e7\u00e3o. Em vez de cada parte do c\u00f3digo ter que gerenciar diretamente a troca de telas, o carregamento de fontes e a renderiza\u00e7\u00e3o de m\u00faltiplas camadas , o ViewRenderer oferece uma interface simples.</p> </li> </ul> <p>Assim, sem precisar conhecer a complexidade interna dos subsistemas, o c\u00f3digo cliente pode simplesmente chamar:</p> <pre><code>InputHandler.process_events()\nViewRenderer.transition_to(\"menu\")\n</code></pre>"},{"location":"PadroesDeProjeto/3.2.GoFsEstruturais/#3242-diagrama-uml","title":"3.2.4.2. Diagrama UML","text":"<p>Portanto, assim ficou modelado em UML o padr\u00e3o Facade no c\u00f3digo do jogo. Clique aqui para acessar:</p> <p>O Diagrama completo abaixo mostra todas as classes e rela\u00e7\u00f5es do padr\u00e3o, permitindo entender a arquitetura global do Facade no jogo. Como o diagrama ficou extenso, logo a seguir ter\u00e3o imagens com zoom em cada fachada (InputHandler e ViewRenderer).</p> <p></p> <p></p> <p><p>Figura 2: Diagrama UML completo.</p></p> <p></p> <p></p> <p><p>Figura 3: Diagrama com zoom na fachada InputHandler.</p></p> <p></p> <p></p> <p><p>Figura 4: Diagrama com zoom na fachada ViewRenderer.</p></p> <p>O diagrama acima ilustra a arquitetura de gerenciamento dos subsistemas centrais do jogo, evidenciando como o Padr\u00e3o de Projeto Facade foi aplicado para unificar e simplificar drasticamente a intera\u00e7\u00e3o com os complexos sistemas de Entrada (Input) e Renderiza\u00e7\u00e3o (View).</p> <p>No topo, encontra-se a classe <code>GameMain</code>, que atua como o cliente principal e orquestrador da arquitetura. Ela cont\u00e9m o game loop e orquestra o fluxo do jogo, mas, em vez de lidar diretamente com a complexidade dos eventos do Pygame ou com o gerenciamento de telas, ela delega essas responsabilidades. <code>GameMain</code> possui uma rela\u00e7\u00e3o de Depend\u00eancia com as duas fachadas, pois ela invoca seus m\u00e9todos est\u00e1ticos (<code>.inicializar()</code>, <code>.process_events()</code>) para controlar o ciclo de vida e a execu\u00e7\u00e3o delas.</p> <p>As fachadas s\u00e3o os componentes centrais que definem o padr\u00e3o:</p> <ol> <li> <p><code>InputHandler</code> (Fachada de Entrada): Atua como um ponto de acesso unificado  para todo o subsistema de eventos.</p> <ul> <li>Responsabilidade: Encapsula a l\u00f3gica de capturar a fila de eventos brutos do Pygame, process\u00e1-los (<code>process_events()</code>), rastrear estados (como <code>mouse_posicao()</code>) e classificar eventos.</li> </ul> </li> <li> <p><code>ViewRenderer</code> (Fachada de Renderiza\u00e7\u00e3o): Serve como o ponto de acesso unificado para todo o subsistema de visualiza\u00e7\u00e3o.</p> <ul> <li>Responsabilidade: Encapsula a complexidade de gerenciar qual tela est\u00e1 ativa, orquestrar transi\u00e7\u00f5es (<code>transition_to()</code>), comandar a renderiza\u00e7\u00e3o (<code>render()</code>) e gerenciar recursos gr\u00e1ficos compartilhados (como fontes via <code>get_fonte()</code>).</li> </ul> </li> </ol> <p>Al\u00e9m do <code>GameMain</code>, o diagrama detalha outros clientes que dependem dessas fachadas:</p> <ul> <li> <p>Clientes de Renderiza\u00e7\u00e3o: As classes <code>MenuScreenRenderer</code>, <code>DifficultScreenRenderer</code>, <code>LevelSelectionScreenRenderer</code>, <code>GameScreenRenderer</code>, <code>ConfigModalRenderer</code> e <code>PauseModalRenderer</code> s\u00e3o tamb\u00e9m clientes do padr\u00e3o. Elas dependem da fachada <code>ViewRenderer</code> para obter acesso a recursos gr\u00e1ficos centralizados, como fontes (<code>get_fonte()</code>), e para executar suas l\u00f3gicas de desenho.</p> </li> <li> <p>Clientes de Entrada: Notavelmente, o diagrama mostra que as classes <code>MenuScreen</code>, <code>DifficultScreen</code>, <code>LevelSelectionScreen</code>, <code>GameScreen</code>, <code>ConfigModal</code> e <code>PauseModal</code> s\u00e3o tamb\u00e9m clientes do padr\u00e3o. Elas dependem da fachada <code>InputHandler</code> para simplificar o processamento de eventos, usando m\u00e9todos como <code>classificar_evento()</code> e <code>mouse_posicao()</code> para implementar suas l\u00f3gicas de intera\u00e7\u00e3o espec\u00edficas (como cliques em bot\u00f5es).</p> </li> </ul> <p>Essa organiza\u00e7\u00e3o reflete o uso claro do Facade para criar pontos de acesso simplificados:</p> <ul> <li> <p>O <code>GameMain</code> (cliente principal) permanece limpo e focado, interagindo apenas com chamadas de alto n\u00edvel como <code>InputHandler.process_events()</code> e <code>ViewRenderer.render()</code>.</p> </li> <li> <p>As fachadas escondem toda a complexidade interna (a fila de eventos do Pygame, a l\u00f3gica de transi\u00e7\u00e3o de telas, o gerenciamento de fontes e a distribui\u00e7\u00e3o de eventos), garantindo que os clientes (<code>GameMain</code>, <code>Screens</code>, <code>Renderers</code>) permane\u00e7am desacoplados dos detalhes de implementa\u00e7\u00e3o desses subsistemas.</p> </li> </ul> <p>Em resumo, o diagrama mostra uma arquitetura onde as fachadas atuam como \"porteiros\" simplificados para os sistemas de entrada e visualiza\u00e7\u00e3o. Isso permite que tanto o <code>GameMain</code> quanto as telas e modais operem em um n\u00edvel de abstra\u00e7\u00e3o muito mais alto, facilitando a manuten\u00e7\u00e3o e a extens\u00e3o do c\u00f3digo.</p>"},{"location":"PadroesDeProjeto/3.2.GoFsEstruturais/#3242-video-de-execucao","title":"3.2.4.2. V\u00eddeo de Execu\u00e7\u00e3o","text":"<p>Foi gravado, na plataforma do Microsoft Teams, uma reuni\u00e3o para a modelagem UML do padr\u00e3o Facade. </p> <p>Clique aqui para acessar a parte 1 e aqui para acessar a parte 2.</p> <p><p>V\u00eddeo parte 1: Execu\u00e7\u00e3o do diagrama UML.</p></p> <p></p> <p><p>V\u00eddeo parte 2: Execu\u00e7\u00e3o do diagrama UML e explica\u00e7\u00e3o ao final</p></p>"},{"location":"PadroesDeProjeto/3.2.GoFsEstruturais/#3243-opinioes-dos-participantes","title":"3.2.4.3. Opini\u00f5es dos Participantes","text":"Danielle Soares <p>Minha experi\u00eancia implementando o padr\u00e3o Facade foi bastante desafiadora, especialmente devido \u00e0 complexidade do diagrama UML, que envolvia muitas classes com diversos m\u00e9todos e atributos. Inicialmente, compreender o funcionamento do Facade e implementar a base das interfaces foi relativamente tranquilo. Entretanto, adaptar o c\u00f3digo j\u00e1 existente a uma arquitetura mais formal exigiu aten\u00e7\u00e3o detalhada, pois foi necess\u00e1rio analisar cuidadosamente as conex\u00f5es entre as classes e identificar formas de otimizar a estrutura e o fluxo do sistema.</p> Enzo Emir <p>Minha compreens\u00e3o do padr\u00e3o Facade foi bastante intuitiva. Sempre acreditei que centralizar as intera\u00e7\u00f5es em um \u00fanico ponto era fundamental para manter uma estrutura de c\u00f3digo robusta e organizada. O Facade \u00e9, essencialmente, a formaliza\u00e7\u00e3o desse conceito, provendo uma 'fachada' que esconde a complexidade interna e facilita a evolu\u00e7\u00e3o do sistema.</p> Leticia Arisa <p>Achei muito interessante estudar sobre o Facade, j\u00e1 que ele ajuda a deixar o c\u00f3digo organizado e simplifica os sistemas complexos. Depois de estudar mais sobre o Facade, percebi que ele \u00e9 uma excelente estrat\u00e9gia para criar uma interface \u00fanica e mais f\u00e1cil de usar.</p> Victor Pontual <p>Foi interessante aprender sobre o padr\u00e3o Facade de forma oficial, pois percebi que eu j\u00e1 implementava conceitos similares de maneira casual sem conhecer a teoria formal por tr\u00e1s. No meu c\u00f3digo, eu costumava criar o que chamava de \"hub de requisi\u00e7\u00f5es\" - classes centralizadoras que concentravam opera\u00e7\u00f5es relacionadas para evitar repeti\u00e7\u00e3o de c\u00f3digo e facilitar manuten\u00e7\u00e3o. Por exemplo, ao inv\u00e9s de espalhar chamadas diretas a APIs ou bibliotecas por todo o c\u00f3digo, eu criava um ponto \u00fanico que encapsulava essa complexidade. </p>"},{"location":"PadroesDeProjeto/3.2.GoFsEstruturais/#326-referencias-bibliograficas","title":"3.2.6 Refer\u00eancias Bibliogr\u00e1ficas","text":"<p>1. GAMMA, Erich et al. Padr\u00f5es de Projeto: Solu\u00e7\u00f5es Reutiliz\u00e1veis de Software Orientado a Objetos. Tradu\u00e7\u00e3o de C. F. Lucena e F. S. C. da Silva. Porto Alegre: Bookman, 2007. (T\u00edtulo original: Design Patterns: Elements of Reusable Object-Oriented Software).</p> <p>2. DEV MEDIA. Padr\u00e3o de Projeto Facade em Java. DevMedia. Dispon\u00edvel em: https://www.devmedia.com.br/padrao-de-projeto-facade-em-java/26476. Acesso em: 23 out. 2025.</p> <p>3. REFACTORING.GURU. Facade. Refactoring.Guru. Dispon\u00edvel em: https://refactoring.guru/pt-br/design-patterns/facade. Acesso em: 23 out. 2025.</p> <p>4. BLOG GRAN CURSOS ONLINE. Padr\u00f5es de Projetos GOF: Padr\u00f5es Estruturais. Dispon\u00edvel em: https://blog.grancursosonline.com.br/padroes-de-projetos-gof-padroes-estruturais/. Acesso em: 23 out. 2025.</p> <p>5. REFACTORING GURU. Padr\u00f5es Estruturais. Dispon\u00edvel em: https://refactoring.guru/pt-br/design-patterns/structural-patterns. Acesso em: 23 out. 2025.</p> <p>6. MILENE. Arquitetura e Desenho de Software - Aula GoFs Estruturais. Profa. Milene. Dispon\u00edvel em: https://aprender3.unb.br/pluginfile.php/3178397/mod_page/content/1/Arquitetura%20e%20Desenho%20de%20Software%20-%20Aula%20GoFs%20Estruturais%20-%20Profa.%20Milene.pdf. Acesso em: 23 out. 2025.</p> <p>7. FIGUEIREDO, Roberto Ten\u00f3rio. Disserta\u00e7\u00e3o: Arquitetura e Padr\u00f5es de Projeto em Sistemas de Software (Disserta\u00e7\u00e3o de Mestrado). Universidade Federal de Pernambuco, 2006. Dispon\u00edvel em: https://repositorio.ufpe.br/bitstream/123456789/11981/1/DISSERTA%c3%87%c3%83O%20Roberto%20Tenorio%20Figueiredo.pdf. Acesso em: 23 out. 2025.</p>"},{"location":"PadroesDeProjeto/3.2.GoFsEstruturais/#historico-de-versoes","title":"Hist\u00f3rico de Vers\u00f5es \ud83d\udcc5","text":"Vers\u00e3o Data Descri\u00e7\u00e3o Autor(es) Revisor(es) <code>0.1</code> 22/10/2025 Adicionando Documenta\u00e7\u00e3o GoF Estrutural Maria Eduarda Andrade, Rafael Welz Caio Duarte <code>0.2</code> 24/10/2025 Adicionando Documenta\u00e7\u00e3o do GoF Facade Danielle Soares, Enzo Emir, Leticia Arisa, Victor Pontual Maria Eduarda Andrade <code>0.3</code> 24/10/2025 Adi\u00e7\u00e3o da se\u00e7\u00e3o de opini\u00f5es dos participantes do Facade e opini\u00e3o pessoal Victor Pontual Danielle Soares, Enzo Emir, Leticia Arisa, Victor Pontual <code>0.4</code> 24/10/2025 V\u00eddeo de execu\u00e7\u00e3o (Facade) Danielle Soares, Enzo Emir, Leticia Arisa, Victor Pontual Marcelo Makoto"},{"location":"PadroesDeProjeto/3.3.GoFsComportamentais/","title":"3.3. M\u00f3dulo Padr\u00f5es de Projeto GoFs Comportamentais","text":""},{"location":"PadroesDeProjeto/3.3.GoFsComportamentais/#331-introducao","title":"3.3.1. Introdu\u00e7\u00e3o","text":"<p>Os Padr\u00f5es de Projeto Comportamentais fazem parte do conjunto de solu\u00e7\u00f5es proposto pela \"Gang of Four\" (GoF) [1] para lidar com desafios recorrentes na modelagem de sistemas orientados a objetos. Enquanto os padr\u00f5es Criacionais tratam da inst\u00e2ncia\u00e7\u00e3o de objetos e os Estruturais da organiza\u00e7\u00e3o entre classes e interfaces, os Comportamentais concentram-se na din\u00e2mica da comunica\u00e7\u00e3o entre objetos, promovendo uma colabora\u00e7\u00e3o mais eficaz e desacoplada.</p> <p>Esses padr\u00f5es s\u00e3o fundamentais para estabelecer fluxos de controle flex\u00edveis, permitindo que algoritmos sejam encapsulados e substitu\u00eddos sem afetar o restante da aplica\u00e7\u00e3o. Ao distribuir responsabilidades de forma estrat\u00e9gica, eles favorecem a manuten\u00e7\u00e3o, extensibilidade e reutiliza\u00e7\u00e3o do c\u00f3digo [2]. No contexto do desenvolvimento de jogos eletr\u00f4nicos, por exemplo, sua aplica\u00e7\u00e3o permite modularizar comportamentos complexos e din\u00e2micos, como demonstrado por Figueiredo em sua disserta\u00e7\u00e3o [3], tornando os sistemas mais adapt\u00e1veis \u00e0s exig\u00eancias de interatividade e evolu\u00e7\u00e3o constante.</p>"},{"location":"PadroesDeProjeto/3.3.GoFsComportamentais/#participantes","title":"Participantes","text":"<p><p>Tabela 1: Participantes</p></p> Nome Fun\u00e7\u00e3o Data Hora Caio Duarte GoF Comportamental - State 22/10/2025 20:00 Danielle Soares GoF Comportamental - Iterator 22/10/2025 19:30 Enzo Emir GoF Comportamental - Strategy 21/10/2025 20:00 Laryssa F\u00e9lix GoF Comportamental -  Strategy 21/10/2025 20:00 Leticia Arisa GoF Comportamental - Iterator 22/10/2025 19:30 Marcelo Makoto GoF Comportamental - State 22/10/2025 20:00 Maria Eduarda GoF Comportamental - Iterator 22/10/2025 19:30 Rafael Welz GoF Comportamental - Strategy 21/10/2025 20:00 Victor Pontual GoF Comportamental - State 20/10/2025 11:00 <p><p>Fonte: Equipe do Projeto, 2025.</p></p>"},{"location":"PadroesDeProjeto/3.3.GoFsComportamentais/#332-metodologia","title":"3.3.2. Metodologia","text":"<p>A pesquisa e o desenvolvimento do estudo dos Padr\u00f5es de Projeto Comportamentais foram conduzidos seguindo uma abordagem pr\u00e1tica e colaborativa, focada na aplica\u00e7\u00e3o real dos conceitos em um sistema de software existente.</p>"},{"location":"PadroesDeProjeto/3.3.GoFsComportamentais/#3321-revisao-e-selecao-de-padroes","title":"3.3.2.1. Revis\u00e3o e Sele\u00e7\u00e3o de Padr\u00f5es","text":"<p>Iniciou-se com a revis\u00e3o do cat\u00e1logo de Padr\u00f5es de Projeto Comportamentais da \"Gang of Four\" (GoF), conforme introduzido na se\u00e7\u00e3o anterior. Foram selecionados os padr\u00f5es mais relevantes para resolver problemas de intera\u00e7\u00e3o e comunica\u00e7\u00e3o observados no software interno do jogo, que est\u00e1 hospedado em um reposit\u00f3rio de c\u00f3digo separado.</p>"},{"location":"PadroesDeProjeto/3.3.GoFsComportamentais/#3322-aplicacao-e-implementacao","title":"3.3.2.2. Aplica\u00e7\u00e3o e Implementa\u00e7\u00e3o","text":"<p>Os padr\u00f5es de projeto selecionados (Strategy, Iterator e State) foram implementados diretamente no c\u00f3digo-fonte do software interno do jogo. Esta etapa foi crucial para testar a efic\u00e1cia dos padr\u00f5es na redu\u00e7\u00e3o do acoplamento, melhoria da legibilidade e aumento da flexibilidade do sistema.</p>"},{"location":"PadroesDeProjeto/3.3.GoFsComportamentais/#3323-modelagem-e-documentacao-uml","title":"3.3.2.3. Modelagem e Documenta\u00e7\u00e3o UML","text":"<p>Para documentar visualmente a estrutura e a aplica\u00e7\u00e3o dos padr\u00f5es, o software Draw.io foi utilizado para a cria\u00e7\u00e3o de Diagramas UML (Linguagem de Modelagem Unificada). Esses diagramas (principalmente de Classe e/ou Sequ\u00eancia) serviram para mapear as novas intera\u00e7\u00f5es e rela\u00e7\u00f5es entre os objetos resultantes da aplica\u00e7\u00e3o dos padr\u00f5es Comportamentais.</p>"},{"location":"PadroesDeProjeto/3.3.GoFsComportamentais/#3324-demonstracao-e-colaboracao","title":"3.3.2.4. Demonstra\u00e7\u00e3o e Colabora\u00e7\u00e3o","text":"<p>Para garantir a transpar\u00eancia do processo e documentar a participa\u00e7\u00e3o de cada membro, as sess\u00f5es de desenvolvimento, discuss\u00f5es t\u00e9cnicas e demonstra\u00e7\u00f5es de execu\u00e7\u00e3o do c\u00f3digo foram gravadas por meio da plataforma Microsoft Teams. Essas grava\u00e7\u00f5es serviram como artefatos de evid\u00eancia, demonstrando a aplica\u00e7\u00e3o pr\u00e1tica dos padr\u00f5es, o fluxo de trabalho colaborativo e a contribui\u00e7\u00e3o individual dos membros da equipe na solu\u00e7\u00e3o dos problemas de design.</p>"},{"location":"PadroesDeProjeto/3.3.GoFsComportamentais/#333-strategy","title":"3.3.3. Strategy","text":"<p>O padr\u00e3o Strategy \u00e9 um dos padr\u00f5es comportamentais definidos pela Gang of Four (GoF) e tem como objetivo encapsular algoritmos ou comportamentos distintos dentro de classes separadas, permitindo que eles sejam intercambi\u00e1veis em tempo de execu\u00e7\u00e3o. Em vez de implementar diretamente um comportamento em uma classe, o Strategy prop\u00f5e que esse comportamento seja delegado a um objeto externo, chamado de estrat\u00e9gia. Isso promove a flexibilidade e o desacoplamento, pois novas estrat\u00e9gias podem ser adicionadas ou modificadas sem alterar o c\u00f3digo da classe principal. Esse padr\u00e3o \u00e9 especialmente \u00fatil quando h\u00e1 m\u00faltiplas varia\u00e7\u00f5es de um mesmo processo, como diferentes formas de ordena\u00e7\u00e3o, c\u00e1lculo ou movimenta\u00e7\u00e3o em jogos, por exemplo. Ao aplicar o Strategy, o sistema se torna mais extens\u00edvel e test\u00e1vel.</p>"},{"location":"PadroesDeProjeto/3.3.GoFsComportamentais/#3331-diagrama-uml","title":"3.3.3.1. Diagrama UML","text":"<p>O GoF Comportamental Strategy foi aplicado ao projeto, nos seguintes c\u00f3digos:</p> <p></p> <p><p>Fonte: Laryssa Felix, Enzo Emir, Rafael Welz , 2025.</p></p> Aplica\u00e7\u00e3o do Padr\u00e3o Strategy (N\u00edveis de Dificuldade) <p>O trecho de c\u00f3digo a seguir, extra\u00eddo do arquivo (<code>DifficultySelector.py</code>), demonstra    a aplica\u00e7\u00e3o do Padr\u00e3o Strategy atrav\u00e9s da cria\u00e7\u00e3o de diferentes estrat\u00e9gias de     <code>dificuldade</code>    (<code>EasyStrategy</code>, <code>NormalStrategy</code> e <code>HardStrategy</code>), todas herdando da interface abstrata <code>StrategyDifficulty</code>. O seletor de dificuldade (<code>DifficultySelector</code>) atua como o contexto, delegando dinamicamente o comportamento conforme o n\u00edvel selecionado pelo jogador.</p> <pre><code>    import pygame\n    from abc import ABC, abstractmethod\n\n        class StrategyDifficulty(ABC):\n\n            @abstractmethod\n            def obter_multiplicador_vida(self) -&gt; float: ...\n            @abstractmethod\n            def obter_multiplicador_ataque(self) -&gt; float: ...\n            @abstractmethod\n            def obter_multiplicador_velocidade(self) -&gt; float: ...\n\n            def aplicar_regras(self):\n                print(f\"[Core Log] Estrat\u00e9gia de Dificuldade '{self.__class__.__name__}' aplicada.\")\n\n\n        class EasyStrategy(StrategyDifficulty):\n            def obter_multiplicador_vida(self): return 0.7\n            def obter_multiplicador_ataque(self): return 0.7\n            def obter_multiplicador_velocidade(self): return 0.9\n\n\n        class NormalStrategy(StrategyDifficulty):\n            def obter_multiplicador_vida(self): return 1.0\n            def obter_multiplicador_ataque(self): return 1.0\n            def obter_multiplicador_velocidade(self): return 1.0\n\n\n        class HardStrategy(StrategyDifficulty):\n            def obter_multiplicador_vida(self): return 1.5\n            def obter_multiplicador_ataque(self): return 1.5\n            def obter_multiplicador_velocidade(self): return 1.2\n\n\n        class DifficultySelector:\n            _strategy: StrategyDifficulty | None = None\n            _nivel: str = 'normal'\n\n            @classmethod\n            def inicializar(cls, nivel='normal'):\n                cls.set_difficulty(nivel)\n\n            @classmethod\n            def set_difficulty(cls, nivel):\n                mapping = {'easy': EasyStrategy, 'normal': NormalStrategy, 'hard': HardStrategy}\n                cls._strategy = mapping.get(nivel.lower(), NormalStrategy)()\n                cls._nivel = nivel\n                cls._strategy.aplicar_regras()\n\n            @classmethod\n            def obter_multiplicador_vida(cls): return cls._strategy.obter_multiplicador_vida()\n            @classmethod\n            def obter_multiplicador_ataque(cls): return cls._strategy.obter_multiplicador_ataque()\n            @classmethod\n            def obter_multiplicador_velocidade(cls): return cls._strategy.obter_multiplicador_velocidade()\n            @classmethod\n            def get_current_level(cls): return cls._nivel\n</code></pre> Interface Visual de Sele\u00e7\u00e3o de Dificuldade <p>J\u00e1 a interface visual para essa escolha est\u00e1 definida em <code>src/View/DifficultScreen.py</code>. O arquivo <code>DifficultScreen.py</code> controla a l\u00f3gica de intera\u00e7\u00e3o do jogador, e o <code>DifficultScreenRenderer.py</code> cuida da renderiza\u00e7\u00e3o dos elementos gr\u00e1ficos da tela de sele\u00e7\u00e3o de dificuldade.</p> <pre><code>    import pygame\n    from Template.BaseScreen import BaseScreen\n    from View.DifficultScreen.DifficultScreenRenderer import DifficultScreenRenderer\n    from View.ViewRenderer import ViewRenderer  \n    from View.InputHandler import InputHandler, InputType\n    from enum import Enum\n\n    class Difficulty(Enum):\n        EASY = \"easy\"\n        MEDIUM = \"medium\"\n        HARD = \"hard\"\n\n    class DifficultScreen(BaseScreen):\n        def __init__(self):\n            super().__init__()\n            self.difficulties = {\n                Difficulty.EASY: {\"name\": \"F\u00e1cil\", \"color\": (100, 200, 100), \"hover_color\": (120, 220, 120)},\n                Difficulty.MEDIUM: {\"name\": \"M\u00e9dio\", \"color\": (200, 200, 100), \"hover_color\": (220, 220, 120)},\n                Difficulty.HARD: {\"name\": \"Dif\u00edcil\", \"color\": (200, 100, 100), \"hover_color\": (220, 120, 120)}\n            }\n            self.selected_difficulty = None\n            self.renderer = DifficultScreenRenderer(self)\n\n        def handle_event(self, event):\n            tipo = InputHandler.classificar_evento(event)\n            pos = InputHandler.mouse_posicao()\n\n            if tipo == InputType.MOUSE and event.type == pygame.MOUSEBUTTONDOWN:\n                for difficulty, rect in self.difficulty_rects.items():\n                    if rect.collidepoint(pos):\n                        self.selected_difficulty = difficulty\n                        print(f\"Dificuldade selecionada: {self.difficulties[difficulty]['name']}\")\n                        break\n\n        def _iniciar_jogo(self):\n            from Core.DifficultySelector import DifficultySelector\n            DifficultySelector.set_difficulty(self.selected_difficulty.value)\n            # a partir daqui o jogo \u00e9 iniciado com a estrat\u00e9gia selecionada\n</code></pre> <p>Portanto, assim ficou modelado em UML, o padr\u00e3o Strategy no c\u00f3digo do jogo. Clique aqui</p> <p></p> <p><p>Fonte: Laryssa Felix, Enzo Emir, Rafael Welz , 2025.</p></p>"},{"location":"PadroesDeProjeto/3.3.GoFsComportamentais/#estrutura-e-responsabilidades","title":"Estrutura e Responsabilidades","text":"<ul> <li> <p><code>StrategyDifficulty</code> Classe abstrata que define o contrato das estrat\u00e9gias de dificuldade, especificando os m\u00e9todos necess\u00e1rios para determinar os multiplicadores de vida, ataque e velocidade.</p> </li> <li> <p><code>EasyStrategy, NormalStrategy, HardStrategy</code> Implementa\u00e7\u00f5es concretas do contrato de <code>StrategyDifficulty</code>. Cada uma define seus pr\u00f3prios multiplicadores, influenciando diretamente o equil\u00edbrio do jogo.</p> </li> <li> <p><code>DifficultySelector</code> Atua como o contexto do padr\u00e3o. Ele gerencia a estrat\u00e9gia ativa e fornece m\u00e9todos centralizados para recuperar os multiplicadores atuais, tornando a l\u00f3gica de dificuldade independente da camada de visualiza\u00e7\u00e3o.</p> </li> <li> <p><code>DifficultScreen</code> Classe respons\u00e1vel pela intera\u00e7\u00e3o do jogador, exibindo op\u00e7\u00f5es de dificuldade e chamando <code>DifficultySelector.set_difficulty()</code> ao iniciar o jogo.</p> </li> <li> <p><code>DifficultScreenRenderer</code> Respons\u00e1vel pela renderiza\u00e7\u00e3o gr\u00e1fica da interface, apresentando os cart\u00f5es de dificuldade com feedback visual (sele\u00e7\u00e3o, hover, desabilitado).</p> </li> </ul>"},{"location":"PadroesDeProjeto/3.3.GoFsComportamentais/#beneficios-da-aplicacao","title":"Benef\u00edcios da Aplica\u00e7\u00e3o","text":"<ul> <li>Flexibilidade: novas dificuldades podem ser adicionadas facilmente, bastando criar uma nova classe que herde de <code>StrategyDifficulty</code>.</li> <li>Baixo acoplamento: o c\u00f3digo de renderiza\u00e7\u00e3o e intera\u00e7\u00e3o n\u00e3o depende de detalhes de implementa\u00e7\u00e3o da dificuldade.</li> <li>Extensibilidade: permite ajustar regras de vida, dano e velocidade sem alterar a estrutura central do jogo.</li> <li>Coes\u00e3o: cada classe tem uma responsabilidade clara e isolada (render, l\u00f3gica de input, regras do jogo, etc.).</li> </ul> <p>Esse design evidencia o uso bem estruturado do GoF Comportamental Strategy, ao encapsular varia\u00e7\u00f5es de comportamento (n\u00edveis de dificuldade) em classes independentes e permitir que o jogo altere sua l\u00f3gica de forma modular, escal\u00e1vel e de f\u00e1cil manuten\u00e7\u00e3o.</p>"},{"location":"PadroesDeProjeto/3.3.GoFsComportamentais/#3332-opinioes-dos-participantes","title":"3.3.3.2. Opini\u00f5es dos Participantes","text":"<p>A elabora\u00e7\u00e3o desta etapa foi realizada de forma colaborativa em reuni\u00e3o pelo Discord, n\u00e3o gravada,  onde os tr\u00eas membros designados estiveram presentes e participaram ativamente da discuss\u00e3o/elabora\u00e7\u00e3o. O processo da execu\u00e7\u00e3o do c\u00f3digo foi feito no Visual Studio Code e a elabora\u00e7\u00e3o da UML foi feita no Draw.io, ferramenta que possibilitou a cria\u00e7\u00e3o e edi\u00e7\u00e3o simult\u00e2nea do diagrama, garantindo integra\u00e7\u00e3o e alinhamento entre os integrantes.  </p> <p>Ao longo da atividade, cada integrante trouxe ideias e feedbacks que ajudaram a consolidar um resultado alinhado com a vis\u00e3o do grupo como um todo. Esse processo coletivo contribuiu tanto para a consist\u00eancia do diagrama quanto para o fortalecimento da colabora\u00e7\u00e3o na equipe.</p> Enzo Emir <p>Pesquisando percebi que uma vantagem do Strategy \u00e9 sua contribui\u00e7\u00e3o para a testabilidade do sistema. Como os comportamentos est\u00e3o isolados em classes espec\u00edficas, \u00e9 poss\u00edvel testar cada estrat\u00e9gia de forma independente, sem depender do contexto completo. Isso favorece a cria\u00e7\u00e3o de simula\u00e7\u00f5es controladas, especialmente \u00fatil em sistemas complexos ou com l\u00f3gica sens\u00edvel, como IA de jogos, c\u00e1lculos financeiros ou regras de neg\u00f3cio.</p> Laryssa F\u00e9lix <p>O padr\u00e3o Strategy \u00e9 uma solu\u00e7\u00e3o elegante para cen\u00e1rios em que m\u00faltiplos comportamentos precisam ser alternados dinamicamente. Sua principal for\u00e7a est\u00e1 na flexibilidade: ao encapsular algoritmos em classes separadas, ele permite que o sistema evolua sem a necessidade de modificar o c\u00f3digo existente. Isso \u00e9 especialmente \u00fatil em jogos digitais, onde diferentes estilos de inimigos, n\u00edveis de dificuldade ou modos de ataque podem ser implementados como estrat\u00e9gias distintas.</p> Rafael Schadt <p>A implementa\u00e7\u00e3o do padr\u00e3o Strategy para as dificuldades do jogo (Easy, Normal, Hard) pareceu desnecessariamente complexa \u00e0 primeira vista. Questionei a necessidade de m\u00faltiplas classes quando uma condicional b\u00e1sica resolvia. No entanto, o valor veio na pr\u00e1tica: encapsular cada regra de dificuldade isoladamente garantiu uma estrutura impec\u00e1vel. A adi\u00e7\u00e3o de novos modos (mesmo que futuramente) se tornou trivial e limpa, confirmando a efic\u00e1cia e eleg\u00e2ncia do padr\u00e3o.</p>"},{"location":"PadroesDeProjeto/3.3.GoFsComportamentais/#3333-video-demonstrativo","title":"3.3.3.3. V\u00eddeo Demonstrativo","text":"<p>Foi gravado, na plataforma do Microsoft Teams, uma reuni\u00e3o para a modelagem UML do padr\u00e3o Strategy e a execu\u00e7\u00e3o do c\u00f3digo al\u00e9m da explica\u00e7\u00e3o do mesmo. Clique aqui para acessar.</p>"},{"location":"PadroesDeProjeto/3.3.GoFsComportamentais/#334-iterator","title":"3.3.4. Iterator","text":"<p>O padr\u00e3o Iterator \u00e9 um padr\u00e3o de projeto comportamental que fornece uma maneira de sequencialmente os elementos de um objeto de cole\u00e7\u00e3o sem expor sua representa\u00e7\u00e3o interna (lista, pilha, \u00e1rvore, etc.)</p> <p>A inten\u00e7\u00e3o principal \u00e9 permitir que os clientes (c\u00f3digo que utiliza a estrutura) percorram a cole\u00e7\u00e3o usando uma interface comum, independentemente da estrutura de dados espec\u00edfica que a implementa.</p>"},{"location":"PadroesDeProjeto/3.3.GoFsComportamentais/#3341-diagrama-uml","title":"3.3.4.1 Diagrama UML","text":"<p>O GoF Comportamental Interator foi aplicado ao projeto, nos seguintes c\u00f3digos:</p> Interface Iterador <pre><code>from abc import ABC, abstractmethod\nfrom typing import TypeVar, Generic\n\n\nT = TypeVar('T')\n\n\n\n\nclass IIterator(ABC, Generic[T]):\n\"\"\"\nDeclara as opera\u00e7\u00f5es necess\u00e1rias para percorrer uma cole\u00e7\u00e3o.\n\"\"\"\n\n@abstractmethod\ndef getNext(self) -&gt; T:\n    \"\"\"\n    Pega o pr\u00f3ximo elemento da itera\u00e7\u00e3o.\n    \"\"\"\n    pass\n\n\n@abstractmethod\ndef hasMore(self) -&gt; bool:\n    \"\"\"\n    Verifica se ainda h\u00e1 elementos para percorrer.\n    \"\"\"\n    pass\n\n\n@abstractmethod\ndef getPosition(self) -&gt; int:\n    \"\"\"\n    Retorna o \u00edndice ou posi\u00e7\u00e3o atual do iterador.\n    \"\"\"\n    pass\n\n\n@abstractmethod\ndef restart(self):\n    \"\"\"\n    Reinicia o iterador, voltando para a primeira posi\u00e7\u00e3o.\n    \"\"\"\n    pass\n\n\n\n\nclass IIterableCollection(ABC, Generic[T]):\n\"\"\"\nDeclara um ou mais m\u00e9todos para obter iteradores.\n\"\"\"\n\n@abstractmethod\ndef createIterator(self) -&gt; IIterator[T]:\n    \"\"\"\n    Retorna uma nova inst\u00e2ncia de um iterador compat\u00edvel.\n    \"\"\"\n    pass\n</code></pre> Iteradores Concretos <pre><code>import pygame\nfrom typing import TypeVar\nfrom .interfaces import IIterator, IIterableCollection\n\n\n# Define que 'T' deve ser sempre um tipo de Sprite\nT = TypeVar('T', bound=pygame.sprite.Sprite)\n\n\n\n\nclass SpriteGroupIterator(IIterator[T]):\n\ndef __init__(self, group: pygame.sprite.Group):\n    # No exato momento da cria\u00e7\u00e3o do iterador \u00e9 tirado um \"snapshot\"\n    # (Uma c\u00f3pia da lista que iterador ir\u00e1 percorrer)\n    self._snapshot: list[T] = group.sprites()\n    self._count: int = len(self._snapshot)\n    self._position: int = 0\n\n\ndef getNext(self) -&gt; T:\n    # Pega o pr\u00f3ximo elemento da itera\u00e7\u00e3o se houver\n    if self.hasMore():\n        sprite = self._snapshot[self._position]\n        self._position += 1\n        return sprite\n    else:\n        raise StopIteration(\"N\u00e3o h\u00e1 mais elementos na itera\u00e7\u00e3o.\")\n\n\ndef hasMore(self) -&gt; bool:\n    # Verifica se h\u00e1 mais elementos para iterar\n    return self._position &lt; self._count\n\n\ndef getPosition(self) -&gt; int:\n    # Retorna a posi\u00e7\u00e3o atual do iterador\n    return self._position\n\n\ndef restart(self):\n    # Reinicia o iterador, voltando para a primeira posi\u00e7\u00e3o do snapshot\n    self._position = 0\n\n\n\n\n\n\nclass IterableSpriteGroup(IIterableCollection[T]):\n# Essa classe age como um adaptador para pygame.sprite.Group\n\ndef __init__(self, group: pygame.sprite.Group):\n    self._group = group\n\n\ndef createIterator(self) -&gt; IIterator[T]:\n    # Cria um novo iterador, que vai tirar um novo snapshot\n    return SpriteGroupIterator[T](self._group)\n\ndef get_raw_group(self) -&gt; pygame.sprite.Group:\n    # M\u00e9todo auxiliar para acessar o grupo original, se necess\u00e1rio\n    return self._group\n</code></pre> Cliente <pre><code>import pygame\nfrom Model.interfaces import IIterableCollection\nfrom Model.Defense.caipora import Caipora\nfrom Model.Enemies.enemy import Enemy\nfrom Model.Items.arrow import Arrow\n\n\nclass PhysicsEngine:\n@classmethod\ndef processar_colisoes(\n    cls,\n    projeteis_col: IIterableCollection[Arrow],\n    inimigos_col: IIterableCollection[Enemy],\n    caiporas_col: IIterableCollection[Caipora]\n):\n    # Colis\u00e3o de proj\u00e9teis com inimigos\n\n\n    # Pega o iterador de proj\u00e9teis e cria um snapshot da lista de proj\u00e9teis\n    iter_projeteis = projeteis_col.createIterator()\n\n    # Percorre o snapshot de proj\u00e9teis\n    while iter_projeteis.hasMore():\n        projetil = iter_projeteis.getNext()\n\n        # Para cada proj\u00e9til \u00e9 criado um novo iterador de inimigos\n        iter_inimigos = inimigos_col.createIterator()\n\n        #Percorre o snapshot de inimigos\n        while iter_inimigos.hasMore():\n            inimigo = iter_inimigos.getNext()\n\n            # Checa colis\u00e3o entre o proj\u00e9til e o inimigo\n            if pygame.sprite.collide_rect(projetil, inimigo):\n\n                # Usa o dano do proj\u00e9til para reduzir a vida do inimigo\n                inimigo.health -= projetil.damage\n\n                if inimigo.health &lt;= 0:\n                    inimigo.kill() # Remove do grupo original\n                projetil.kill() # Remove o proj\u00e9til do grupo original\n                break\n\n    # Colis\u00e3o de inimigos com defesas\n\n    # Cria uma nova itera\u00e7\u00e3o de inimigos\n    iter_inimigos_ataque = inimigos_col.createIterator()\n\n    # Percorre o snapshot de inimigos\n    while iter_inimigos_ataque.hasMore():\n        inimigo = iter_inimigos_ataque.getNext()\n\n        # Para cada inimigo, cria um novo iterador de Caiporas\n        iter_caiporas = caiporas_col.createIterator()\n        defesas_na_linha = [] # Lista tempor\u00e1ria\n\n        # Percorre o snapshot de Caiporas\n        while iter_caiporas.hasMore():\n            defesa = iter_caiporas.getNext()\n            if defesa.grid_y == inimigo.grid_y:\n                defesas_na_linha.append(defesa)\n\n\n        # L\u00f3gica de ataque\n        atacou_alguem = False\n        for defesa in defesas_na_linha:\n            if pygame.sprite.collide_rect(inimigo, defesa):\n                inimigo.is_attacking = True\n                atacou_alguem = True\n\n                if hasattr(inimigo, 'attack'):\n                    inimigo.attack(defesa)\n                else:\n                    defesa.health -= inimigo.damage * 0.1\n\n                if defesa.health &lt;= 0:\n                    defesa.kill()\n\n                break # Inimigo ataca apenas uma defesa por vez\n\n        if not atacou_alguem:\n            inimigo.is_attacking = False\n</code></pre> <p>Portanto, assim ficou o modelado em UML, o padr\u00e3o Iterator no c\u00f3digo do jogo. Clique aqui para acessar:</p> <p></p> <p>O diagrama acima ilustra a arquitetura de classes respons\u00e1vel pelo processamento de colis\u00f5es no jogo, evidenciando como o Padr\u00e3o de Projeto Iterador foi aplicado para permitir que a l\u00f3gica de f\u00edsica percorra diferentes cole\u00e7\u00f5es de entidades (como inimigos, proj\u00e9teis e defesas) de maneira uniforme.</p> <p>No centro do padr\u00e3o, encontram-se as duas interfaces principais:</p> <ul> <li> <p>IterableCollection (Agregado): Define a interface para as cole\u00e7\u00f5es que podem ser percorridas. Sua responsabilidade principal \u00e9 declarar o m\u00e9todo de f\u00e1brica createIterator(), que retorna um objeto Iterador.</p> </li> <li> <p>Iterator: Define a interface comum para percorrer os elementos da cole\u00e7\u00e3o, abstraindo a estrutura interna. Ela inclui m\u00e9todos essenciais como getNext() (para obter o pr\u00f3ximo item) e hasMore() (para verificar se a itera\u00e7\u00e3o terminou).</p> </li> </ul> <p>Abaixo, est\u00e3o as implementa\u00e7\u00f5es concretas dessas interfaces:</p> <ul> <li> <p>IterableSpriteGroup (Agregado Concreto): \u00c9 a classe que representa a cole\u00e7\u00e3o de sprites em si (provavelmente encapsulando um pygame.sprite.Group). Ela implementa IterableCollection e sabe como criar seu iterador espec\u00edfico.</p> </li> <li> <p>SpriteGroupIterator (Iterador Concreto): \u00c9 a classe que implementa a interface Iterator, contendo a l\u00f3gica espec\u00edfica para percorrer os elementos dentro de um IterableSpriteGroup.</p> </li> </ul> <p>Finalmente, a classe PhysicsEngine atua como o Cliente do padr\u00e3o. Ela depende apenas das interfaces (IterableCollection e Iterator), e n\u00e3o das implementa\u00e7\u00f5es concretas.</p> <p>Como visto no c\u00f3digo, o m\u00e9todo processar_colisoes recebe cole\u00e7\u00f5es (como projeteis_col, inimigos_col) que obedecem \u00e0 interface IIterableCollection. Dentro do m\u00e9todo, em vez de acessar diretamente a estrutura de dados dessas cole\u00e7\u00f5es, o PhysicsEngine solicita um iterador atrav\u00e9s de projeteis_col.createIterator().</p> <p>Em seguida, ele usa os m\u00e9todos da interface do iterador (while iter_projeteis.hasMore(): e projetil = iter_projeteis.getNext()) para processar cada elemento.</p>"},{"location":"PadroesDeProjeto/3.3.GoFsComportamentais/#3343-opnioes-dos-participantes","title":"3.3.4.3. Opni\u00f5es dos Participantes","text":"Danielle Soares <p> A minha experi\u00eancia foi que eu achei um pouco dif\u00edcil entender o Iterator dentro do nosso projeto.   Geralmente, os exemplos que vemos relacionados a jogos est\u00e3o sempre ligados a n\u00edveis, um n\u00edvel leva a outro, que leva a outro, e assim por diante. \u00c9 necess\u00e1rio ter um iterator que aponte para o pr\u00f3ximo n\u00edvel, e depois para o pr\u00f3ximo, e para o pr\u00f3ximo.   Como a gente ainda n\u00e3o tem o c\u00f3digo totalmente implementado, n\u00e3o consegu\u00edamos visualizar essa l\u00f3gica de n\u00edveis claramente. Tivemos que buscar essa l\u00f3gica do iterator dentro do que j\u00e1 estava implementado, e isso foi um pouco dif\u00edcil de identificar.   Mas depois que entendemos o conceito, tudo ficou mais tranquilo. \u00c9 um conceito simples, mas o nome e toda a ideia por tr\u00e1s dele, quando a gente v\u00ea pela primeira vez, podem assustar um pouco. </p> Leticia Arisa <p> Sobre o Iterator, no come\u00e7o foi um pouco dif\u00edcil para mim entender como o c\u00f3digo funcionava, mas depois comecei a compreender melhor. Quando parei para estudar com calma, percebi que n\u00e3o era t\u00e3o dif\u00edcil assim. </p> Maria Eduarda <p> Basicamente, a minha experi\u00eancia foi um pouco complicada, principalmente por eu ainda ter pouca base em orienta\u00e7\u00e3o a objetos. Ent\u00e3o, ligar esse conhecimento com o padr\u00e3o de projeto comportamental e tentar entender como ele funcionaria dentro do nosso projeto foi bastante dif\u00edcil para mim.   Felizmente, eu tive ajuda das minhas colegas de trabalho, o que tornou o processo um pouco mais tranquilo. Aos poucos, fui conseguindo entender e conectar tudo. Quando a gente vai conversando e trocando ideias, o entendimento flui melhor e conseguimos construir juntos.   No fim, apesar de ter sido uma experi\u00eancia dif\u00edcil no come\u00e7o, depois da nossa apresenta\u00e7\u00e3o eu consegui compreender bem o conceito, e fiquei satisfeita com o resultado. </p>"},{"location":"PadroesDeProjeto/3.3.GoFsComportamentais/#3344-video-demonstrativo","title":"3.3.4.4. V\u00eddeo Demonstrativo","text":"<p>Foi gravado, na plataforma do Microsoft Teams, uma reuni\u00e3o para a modelagem UML do padr\u00e3o Iterator e a explica\u00e7\u00e3o do mesmo. Clique aqui para acessar.</p>"},{"location":"PadroesDeProjeto/3.3.GoFsComportamentais/#335-state","title":"3.3.5. State","text":"<p>O padr\u00e3o State \u00e9 um padr\u00e3o de projeto comportamental que permite a um objeto alterar seu comportamento quando seu estado interno muda. O objeto parecer\u00e1 mudar de classe [4].</p> <p>A inten\u00e7\u00e3o principal \u00e9 permitir que um objeto altere seu comportamento sem mudar sua classe, encapsulando os comportamentos associados a estados espec\u00edficos em objetos separados.</p>"},{"location":"PadroesDeProjeto/3.3.GoFsComportamentais/#3351-diagrama-uml","title":"3.3.5.1. Diagrama UML","text":"<p>O GoF Comportamental State foi aplicado ao projeto, no seguinte c\u00f3digo:</p> <p></p> Aplica\u00e7\u00e3o do Padr\u00e3o State (Gerenciamento de Comportamento) <p>O trecho de c\u00f3digo a seguir, extra\u00eddo do arquivo <code>AttackingState.py</code>, demonstra a implementa\u00e7\u00e3o do Padr\u00e3o State. A classe <code>AttackingState</code> encapsula o comportamento de uma unidade de defesa quando est\u00e1 no estado de ataque. Ela gerencia a l\u00f3gica de anima\u00e7\u00e3o, a transi\u00e7\u00e3o para outros estados (como <code>IdleState</code>) e a execu\u00e7\u00e3o de a\u00e7\u00f5es espec\u00edficas, como <code>atirar()</code>.</p> <pre><code>import pygame\n\nclass AttackingState:\n\n    def enter(self, defense) -&gt; None:\n        defense.atacando = True\n        defense.animation_timer = 0\n        print(f\"[{defense.__class__.__name__}] Entrando em AttackingState\")\n\n    def exit(self, defense) -&gt; None:\n        defense.atacando = False\n        defense.frame_index = 0\n        if hasattr(defense, 'frames') and defense.frames:\n            defense.image = defense.frames[defense.frame_index]\n\n    def update(self, defense) -&gt; None:\n        from Model.sprite_groups import sprite_manager\n        inimigos_grupo = sprite_manager.inimigos\n\n        alvo_na_linha = any(\n            e for e in inimigos_grupo \n            if e.grid_y == defense.grid_y and e.rect.right &gt; defense.rect.right\n        )\n\n        if not alvo_na_linha:\n            from Model.Defense.IdleState import IdleState\n            defense.set_state(IdleState())\n            return\n\n        defense.animation_timer += 1\n        if defense.animation_timer &gt;= defense.frame_duration:\n            if defense.frame_index == defense.FRAME_DE_TIRO:\n                defense.atirar()\n\n            defense.frame_index = (defense.frame_index + 1) % len(defense.frames)\n            defense.image = defense.frames[defense.frame_index]\n            defense.animation_timer = 0\n</code></pre> <p>Portanto, assim ficou modelado em UML, o padr\u00e3o State no c\u00f3digo do jogo. Clique aqui para acessar:</p> <p></p> <p>O diagrama acima ilustra a aplica\u00e7\u00e3o do Padr\u00e3o de Projeto State para gerenciar o comportamento din\u00e2mico das entidades de defesa no jogo, como a <code>Caipora</code>. A arquitetura desacopla o comportamento de uma entidade de sua classe principal, permitindo que ela mude de comportamento em tempo de execu\u00e7\u00e3o.</p> <p>Os principais componentes do diagrama s\u00e3o:</p> <ul> <li> <p><code>State</code> (Interface): No topo, a interface <code>State</code> define o contrato que todos os estados concretos devem seguir. Ela declara os m\u00e9todos essenciais que governam o ciclo de vida de um estado:</p> <ul> <li><code>enter(entity)</code>: Executado quando a entidade entra no estado.</li> <li><code>exit(entity)</code>: Executado quando a entidade sai do estado, para limpeza.</li> <li><code>update(entity)</code>: Chamado a cada quadro do jogo para executar a l\u00f3gica do estado.</li> </ul> </li> <li> <p><code>IdleState</code> e <code>AttackingState</code> (Estados Concretos): Estas classes implementam a interface <code>State</code> e encapsulam os comportamentos espec\u00edficos.</p> <ul> <li><code>IdleState</code>: Representa o estado ocioso, onde a defesa pode estar aguardando inimigos. Sua l\u00f3gica de <code>update</code> verifica as condi\u00e7\u00f5es para transicionar para o <code>AttackingState</code> (por exemplo, se um inimigo entra no alcance).</li> <li><code>AttackingState</code>: Cont\u00e9m a l\u00f3gica para quando a defesa est\u00e1 ativamente atacando. Seu <code>update</code> gerencia a anima\u00e7\u00e3o de ataque e verifica se deve retornar ao <code>IdleState</code> (por exemplo, se n\u00e3o h\u00e1 mais inimigos na linha).</li> </ul> </li> <li> <p><code>Defesa</code> (Contexto): A classe <code>Defesa</code> atua como o Contexto. Ela mant\u00e9m uma refer\u00eancia ao seu estado atual (um objeto que implementa <code>State</code>) e delega a execu\u00e7\u00e3o do comportamento para esse objeto.</p> <ul> <li>Possui um m\u00e9todo <code>set_state(newState)</code> que permite a si mesma ou aos objetos de estado alterar seu estado atual, executando os m\u00e9todos <code>exit()</code> do estado antigo e <code>enter()</code> do novo.</li> <li>O m\u00e9todo <code>update()</code> da <code>Defesa</code> simplesmente chama o <code>update()</code> de seu estado atual, garantindo que o comportamento correto seja executado.</li> </ul> </li> <li> <p><code>Caipora</code>: \u00c9 uma implementa\u00e7\u00e3o concreta da <code>Defesa</code>, representando uma unidade espec\u00edfica do jogo que utiliza essa m\u00e1quina de estados para controlar seu comportamento.</p> </li> </ul> <p>Essa estrutura permite que o comportamento da <code>Caipora</code> mude dinamicamente entre \"ocioso\" e \"atacando\" sem usar condicionais complexas dentro da classe <code>Caipora</code>, tornando o c\u00f3digo mais limpo, organizado e f\u00e1cil de estender com novos estados.</p>"},{"location":"PadroesDeProjeto/3.3.GoFsComportamentais/#3352-opinioes-dos-participantes","title":"3.3.5.2. Opini\u00f5es dos Participantes","text":"<p>A elabora\u00e7\u00e3o desta etapa foi realizada de forma colaborativa em reuni\u00e3o pelo Discord, n\u00e3o gravada, onde os tr\u00eas membros designados estiveram presentes e participaram ativamente da discuss\u00e3o/elabora\u00e7\u00e3o. O processo da execu\u00e7\u00e3o do c\u00f3digo foi feito no Visual Studio Code e a elabora\u00e7\u00e3o da UML foi feita no Draw.io, ferramenta que possibilitou a cria\u00e7\u00e3o e edi\u00e7\u00e3o simult\u00e2nea do diagrama, garantindo integra\u00e7\u00e3o e alinhamento entre os integrantes.</p> <p>Ao longo da atividade, cada integrante trouxe ideias e feedbacks que ajudaram a consolidar um resultado alinhado com a vis\u00e3o do grupo como um todo. Esse processo coletivo contribuiu tanto para a consist\u00eancia do diagrama quanto para o fortalecimento da colabora\u00e7\u00e3o na equipe.</p> Caio Duarte <p>Gostei muito do padr\u00e3o, achei algo bem diferente e fora da caixinha a l\u00f3gica dele de controlar estados, creio que ele encaixou muito bem no nosso trabalho ao controlar os estados das entidades.</p> Marcelo Makoto <p>Implementar o padr\u00e3o de States foi bem mais intuitivo do que eu imaginei no come\u00e7o. Ele tamb\u00e9m se torna crucial no nosso projeto, visto que a quantidade de entidades aumentar\u00e1 cada vez mais com a evolu\u00e7\u00e3o do jogo e esse padr\u00e3o ajudar\u00e1 na organiza\u00e7\u00e3o do projeto e na implementa\u00e7\u00e3o de novas entidades.</p> Victor Pontual <p>Implementar o State Pattern foi revelador \u2014 antes eu usava flags booleanas e condicionais espalhados para gerenciar comportamentos dos personagens, o que funcionava mas ficava confuso. Ao aprender o padr\u00e3o formal, percebi que j\u00e1 fazia algo parecido de forma \"casual\", s\u00f3 que agora com estrutura adequada: cada comportamento virou uma entidade independente, transi\u00e7\u00f5es ficaram expl\u00edcitas, e adicionar novos estados se tornou trivial sem mexer no c\u00f3digo existente. Foi daqueles momentos onde voc\u00ea aprende a nomenclatura oficial de algo que j\u00e1 fazia intuitivamente, transformando um \"sistema improvisado\" em arquitetura elegante e escal\u00e1vel.</p>"},{"location":"PadroesDeProjeto/3.3.GoFsComportamentais/#3353-video-demonstrativo","title":"3.3.5.3. V\u00eddeo Demonstrativo","text":"<p>Foi gravada, na plataforma do Microsoft Teams, uma reuni\u00e3o para a modelagem UML do padr\u00e3o State e a execu\u00e7\u00e3o do c\u00f3digo al\u00e9m da explica\u00e7\u00e3o do mesmo. Clique aqui para acessar.</p>"},{"location":"PadroesDeProjeto/3.3.GoFsComportamentais/#336-referencias-bibliograficas","title":"3.3.6 Refer\u00eancias Bibliogr\u00e1ficas","text":"<p>1. GAMMA, Erich et al. Padr\u00f5es de Projeto: Solu\u00e7\u00f5es Reutiliz\u00e1veis de Software Orientado a Objetos. Tradu\u00e7\u00e3o de C. F. Lucena e F. S. C. da Silva. Porto Alegre: Bookman, 2007. (T\u00edtulo original: Design Patterns: Elements of Reusable Object-Oriented Software).</p> <p>2. SERRANO, Milene. Aula \u2013 GOFs Comportamentais. Arquitetura e Desenho de Software. Universidade de Bras\u00edlia \u2013 UnB Gama, [s.d.]. Material de aula (apresenta\u00e7\u00e3o de slides).</p> <p>3. FIGUEIREDO, Roberto Ten\u00f3rio. Padr\u00f5es de Projeto GOF aplicados ao Desenvolvimento de Jogos Eletr\u00f4nicos. 2014. 123 f. Disserta\u00e7\u00e3o (Mestrado em Ci\u00eancia da Computa\u00e7\u00e3o) \u2013 Universidade Federal de Pernambuco, Centro de Inform\u00e1tica, Recife, 2014.</p> <p>4. UNITY CODER CORNER. Unity: The State Pattern. Medium, 2 de ago. de 2021. Dispon\u00edvel em: https://medium.com/unity-coder-corner/unity-the-state-pattern-ee067fe8bf1b. Acesso em: 24 de out. de 2025.</p>"},{"location":"PadroesDeProjeto/3.3.GoFsComportamentais/#historico-de-versoes","title":"Hist\u00f3rico de Vers\u00f5es \ud83d\udcc5","text":"Vers\u00e3o Data Descri\u00e7\u00e3o Autor(es) Revisor(es) <code>0.1</code> 24/10/2025 Adicionando Documenta\u00e7\u00e3o GoF Comportamental Laryssa Felix Caio Duarte <code>0.2</code> 24/10/2025 Ajustes Documenta\u00e7\u00e3o GoF Comportamental Laryssa Felix, Enzo Emir, Rafael Welz Caio Duarte <code>0.3</code> 24/10/2025 Adiciocionando Documenta\u00e7\u00e3o Iterator Danielle Soares, Leticia Arisa, Maria Eduarda Andrade Marcelo Makoto <code>0.4</code> 24/10/2025 Adicionando Documenta\u00e7\u00e3o GoF State Marcelo Makoto Maria Eduarda Andrade"},{"location":"PadroesDeProjeto/3.4.ParticipacoesPadroes/","title":"3.4. Participa\u00e7\u00f5es - Padr\u00f5es de Projeto","text":"<p>\u00c9 importante frisar que, quando um commit espec\u00edfico formaliza o refactoring para aplicar um Padr\u00e3o GoF (Gang of Four), isso n\u00e3o isola o m\u00e9rito.</p> <p>O desenvolvedor que fez o commit final agiu como catalisador. As discuss\u00f5es, revis\u00f5es e contribui\u00e7\u00f5es pr\u00e9vias de toda a equipe prepararam o c\u00f3digo para essa melhoria arquitetural.</p>"},{"location":"PadroesDeProjeto/3.4.ParticipacoesPadroes/#padrao-gof-criacional","title":"Padr\u00e3o GoF Criacional","text":"Nome do Membro Contribui\u00e7\u00e3o Signific\u00e2ncia da Contribui\u00e7\u00e3o para o Projeto Comprobat\u00f3rios Claros Caio Duarte 1. GoF Singleton Excelente 1. aplica\u00e7\u00e3o Singleton ; 2.Grava\u00e7\u00e3o 3. Documenta\u00e7\u00e3o Danielle Soares 1. GoF Prototype Excelente 1. commit Prototype; 2. Grava\u00e7\u00e3o; 3. Documenta\u00e7\u00e3o Enzo Emir 1. GoF Prototype Excelente 1. commit Prototype; 2. Grava\u00e7\u00e3o; 3. Documenta\u00e7\u00e3o Laryssa F\u00e9lix 1. GoF Singleton Excelente 1. aplica\u00e7\u00e3o Singleton ; 2.Grava\u00e7\u00e3o 3. Documenta\u00e7\u00e3o Leticia Arisa 1. GoF Prototype Excelente 1. commit Prototype; 2. Grava\u00e7\u00e3o; 3. Documenta\u00e7\u00e3o Marcelo Makoto 1. GoF Prototype Excelente 1. commit Prototype; 2. Grava\u00e7\u00e3o; 3. Documenta\u00e7\u00e3o Maria Eduarda 1. GoF Prototype Excelente 1. commit Prototype; 2. Grava\u00e7\u00e3o; 3. Documenta\u00e7\u00e3o Rafael Welz 1. GoF Singleton Excelente 1. aplica\u00e7\u00e3o Singleton ; 2.Grava\u00e7\u00e3o 3. Documenta\u00e7\u00e3o Victor Pontual 1. GoF Singleton Excelente 1. aplica\u00e7\u00e3o Singleton ; 2. Grava\u00e7\u00e3o 3. Documenta\u00e7\u00e3o"},{"location":"PadroesDeProjeto/3.4.ParticipacoesPadroes/#padrao-gof-estrutural","title":"Padr\u00e3o GoF Estrutural","text":"Nome do Membro Contribui\u00e7\u00e3o Signific\u00e2ncia da Contribui\u00e7\u00e3o para o Projeto Comprobat\u00f3rios Claros Caio Duarte 1. GoF Composite Excelente 1. aplica\u00e7\u00e3o Composite;  2. Grava\u00e7\u00e3o Danielle Soares 1. GoF Facade Excelente 1. Implementa\u00e7\u00e3o InputHandler no MenuScreen e LevelSelectScreen2. Implementa\u00e7\u00e3o InputHandler &amp; ViewRenderer no DifficultScreen3. Commit de inser\u00e7\u00e3o de documenta\u00e7\u00e3o4. Commit de opini\u00e3o pessoal5. V\u00eddeo parte 16. V\u00eddeo parte 2 Enzo Emir 1. GoF Facade Excelente 1. Readequa\u00e7\u00e3o para o padr\u00e3o GoF Facade2. Fix: LevelSelectScreen usando ViewRenderer3. Commit de inser\u00e7\u00e3o de documenta\u00e7\u00e3o4. V\u00eddeo parte 15. V\u00eddeo parte 2 Laryssa F\u00e9lix 1. GoF Composite Excelente 1. aplica\u00e7\u00e3o Composite; 2. Grava\u00e7\u00e3o Leticia Arisa 1. GoF Facade Excelente 1. Update: menu pause2. Feat: adicionar menu_config3. Feat: adicionar menu configura\u00e7\u00f5es4. Commit de inser\u00e7\u00e3o de documenta\u00e7\u00e3o5. Commit de opini\u00e3o pessoal6. V\u00eddeo parte 17. V\u00eddeo parte 2 Marcelo Makoto 1. GoF Composite Excelente 1. aplica\u00e7\u00e3o Composite;  2. Grava\u00e7\u00e3o Maria Eduarda 1. GoF Composite Excelente 1. aplica\u00e7\u00e3o Composite  2. Grava\u00e7\u00e3o Rafael Welz 1. GoF Composite Excelente 1. aplica\u00e7\u00e3o Composite;  2. Grava\u00e7\u00e3o; 3. Documenta\u00e7\u00e3o Victor Pontual 1. GoF Facade Excelente 1. Refactor: readequa\u00e7\u00e3o facades2. Feat: cria\u00e7\u00e3o do hub de inputs3. Commit de inser\u00e7\u00e3o de documenta\u00e7\u00e3o4. Commit de opini\u00e3o pessoal5. V\u00eddeo parte 16. V\u00eddeo parte 2"},{"location":"PadroesDeProjeto/3.4.ParticipacoesPadroes/#padrao-gof-comportamental","title":"Padr\u00e3o GoF Comportamental","text":"Nome do Membro Contribui\u00e7\u00e3o Signific\u00e2ncia da Contribui\u00e7\u00e3o para o Projeto Comprobat\u00f3rios Claros Caio Duarte 1. GoF State Excelente 1. Grava\u00e7\u00e3o. 2. commit implementa\u00e7\u00e3o do GOF de States na l\u00f3gica da entities. 3. commit corre\u00e7\u00e3o da anima\u00e7\u00e3o de ataque do bicho pap\u00e3o Danielle Soares 1. GoF Iterator Excelente 1. commit da implementa\u00e7\u00e3o do Iterator. 2. Grava\u00e7\u00e3o; 3. Documenta\u00e7\u00e3o Enzo Emir 1. GoF Strategy Excelente 1. commit da implementa\u00e7\u00e3o do Strategy. 2. Grava\u00e7\u00e3o Laryssa F\u00e9lix 1. GoF Strategy Excelente 1. commit da implementa\u00e7\u00e3o do Strategy. 2. Grava\u00e7\u00e3o Leticia Arisa 1. GoF Iterator Excelente 1. commit da implementa\u00e7\u00e3o do Iterator. 2. Grava\u00e7\u00e3o; 3. Documenta\u00e7\u00e3o Marcelo Makoto 1. GoF State Excelente 1. Grava\u00e7\u00e3o. 2. commit implementa\u00e7\u00e3o do GOF de States na l\u00f3gica da entities. 3. commit corre\u00e7\u00e3o da anima\u00e7\u00e3o de ataque do bicho pap\u00e3o Maria Eduarda 1. GoF Iterator Excelente 1. commit da implementa\u00e7\u00e3o do Iterator. 2. Grava\u00e7\u00e3o; 3. Documenta\u00e7\u00e3o Rafael Welz 1. GoF Strategy Excelente 1. commit da implementa\u00e7\u00e3o do Strategy. 2. Grava\u00e7\u00e3o Victor Pontual 1. GoF State Excelente 1. Grava\u00e7\u00e3o. 2. commit implementa\u00e7\u00e3o do GOF de States na l\u00f3gica da entities. 3. commit corre\u00e7\u00e3o da anima\u00e7\u00e3o de ataque do bicho pap\u00e3o"},{"location":"PadroesDeProjeto/3.5.IniciativasExtras/","title":"2.5. Iniciativas Extras (GOFs)","text":""},{"location":"PadroesDeProjeto/3.5.IniciativasExtras/#introducao","title":"Introdu\u00e7\u00e3o","text":"<p>Durante o desenvolvimento da entrega 3, a equipe implementou diversas iniciativas extras para garantir a qualidade, transpar\u00eancia e documenta\u00e7\u00e3o adequada do processo de desenvolvimento. Estas iniciativas incluem grava\u00e7\u00f5es de reuni\u00f5es, atas detalhadas e mais de um GOF por classifica\u00e7\u00e3o (Criacional, Estrutural e Comportamental).</p>"},{"location":"PadroesDeProjeto/3.5.IniciativasExtras/#gravacoes-de-reunioes","title":"Grava\u00e7\u00f5es de Reuni\u00f5es","text":""},{"location":"PadroesDeProjeto/3.5.IniciativasExtras/#criacionais","title":"Criacionais","text":""},{"location":"PadroesDeProjeto/3.5.IniciativasExtras/#singleton","title":"Singleton","text":"<p>O padr\u00e3o Singleton foi aplicado na classe <code>AssetProvider</code>, garantindo que apenas uma inst\u00e2ncia fosse respons\u00e1vel por gerenciar e compartilhar os recursos do jogo. Essa abordagem promoveu centraliza\u00e7\u00e3o e controle eficiente do carregamento de assets, evitando duplica\u00e7\u00f5es e inconsist\u00eancias. Os participantes destacaram o uso controlado desse padr\u00e3o e os benef\u00edcios em centralizar recursos, reconhecendo tamb\u00e9m a import\u00e2ncia de evitar acoplamento excessivo.</p> <p>Grava\u00e7\u00e3o: Apresenta\u00e7\u00e3o Singleton - GoFs Criacionais </p>"},{"location":"PadroesDeProjeto/3.5.IniciativasExtras/#prototype","title":"Prototype","text":"<p>O padr\u00e3o Prototype foi utilizado para otimizar a cria\u00e7\u00e3o de entidades no jogo por meio de clonagem de objetos existentes. Atrav\u00e9s das classes <code>BichoPapaoPrototype</code>, <code>EnemyPrototypeRegistry</code> e <code>EnemyFactory</code>, tornou-se poss\u00edvel gerar inimigos com diferentes configura\u00e7\u00f5es de forma eficiente. Esse padr\u00e3o favoreceu a reutiliza\u00e7\u00e3o de inst\u00e2ncias e a flexibilidade na cria\u00e7\u00e3o din\u00e2mica de entidades, al\u00e9m de facilitar a manuten\u00e7\u00e3o do c\u00f3digo.</p> <p>Grava\u00e7\u00e3o: Apresenta\u00e7\u00e3o Prototype - GoFs Criacionais </p>"},{"location":"PadroesDeProjeto/3.5.IniciativasExtras/#estruturais","title":"Estruturais","text":""},{"location":"PadroesDeProjeto/3.5.IniciativasExtras/#facade","title":"Facade","text":"<p>O padr\u00e3o Facade foi aplicado nos subsistemas de entrada (InputHandler) e renderiza\u00e7\u00e3o (ViewRenderer) do jogo, fornecendo uma interface unificada para componentes complexos. Ele simplificou a comunica\u00e7\u00e3o entre diferentes partes do sistema e reduziu o acoplamento. Os membros da equipe destacaram o ganho em clareza arquitetural e facilidade de manuten\u00e7\u00e3o, especialmente na intera\u00e7\u00e3o entre o motor do jogo e os m\u00f3dulos visuais.</p> <p>Grava\u00e7\u00e3o: Apresenta\u00e7\u00e3o Facade - Parte 1 </p> <p>Grava\u00e7\u00e3o: Apresenta\u00e7\u00e3o Facade - Parte 2 </p>"},{"location":"PadroesDeProjeto/3.5.IniciativasExtras/#composite","title":"Composite","text":"<p>O padr\u00e3o Composite foi implementado para gerenciar grupos de sprites (como inimigos, proj\u00e9teis e itens) de maneira hier\u00e1rquica. Ele permite tratar objetos simples e compostos de forma uniforme por meio da classe <code>SpriteComposite</code>, respons\u00e1vel por atualizar, desenhar e redefinir todos os grupos de entidades do jogo. Essa implementa\u00e7\u00e3o proporcionou uma arquitetura mais organizada e escal\u00e1vel, al\u00e9m de facilitar a manuten\u00e7\u00e3o das estruturas internas.</p> <p>Grava\u00e7\u00e3o: Apresenta\u00e7\u00e3o Composite - GoFs Estruturais </p>"},{"location":"PadroesDeProjeto/3.5.IniciativasExtras/#comportamentais","title":"Comportamentais","text":""},{"location":"PadroesDeProjeto/3.5.IniciativasExtras/#state","title":"State","text":"<p>O padr\u00e3o State foi utilizado para controlar os comportamentos din\u00e2micos das entidades de defesa do jogo, como a <code>Caipora</code>, alternando entre estados como \"ocioso\" e \"atacando\". Essa abordagem permitiu encapsular as mudan\u00e7as de comportamento e simplificar a l\u00f3gica condicional. A equipe destacou como o padr\u00e3o favoreceu a extensibilidade e clareza no gerenciamento de estados dentro da mec\u00e2nica do jogo.</p> <p>Grava\u00e7\u00e3o: Apresenta\u00e7\u00e3o State - GoFs Comportamentais </p>"},{"location":"PadroesDeProjeto/3.5.IniciativasExtras/#strategy","title":"Strategy","text":"<p>O padr\u00e3o Strategy foi empregado para alternar entre diferentes n\u00edveis de dificuldade no jogo de maneira flex\u00edvel, encapsulando as estrat\u00e9gias <code>Easy</code>, <code>Normal</code> e <code>Hard</code> em classes separadas. Com isso, a equipe conseguiu permitir a troca din\u00e2mica de comportamento sem modificar o c\u00f3digo principal, demonstrando o princ\u00edpio aberto/fechado. Esse padr\u00e3o tamb\u00e9m melhorou a organiza\u00e7\u00e3o do c\u00f3digo e reduziu a duplica\u00e7\u00e3o de l\u00f3gica entre os modos de jogo.</p> <p>Grava\u00e7\u00e3o: Apresenta\u00e7\u00e3o Strategy - GoFs Comportamentais </p>"},{"location":"PadroesDeProjeto/3.5.IniciativasExtras/#documentacao-colaborativa","title":"Documenta\u00e7\u00e3o Colaborativa","text":""},{"location":"PadroesDeProjeto/3.5.IniciativasExtras/#ferramentas-utilizadas","title":"Ferramentas Utilizadas","text":"<ul> <li>Draw.io (app.diagrams.net): Para desenvolvimento da modelagem de cada GOF;</li> <li>GitHub: Para versionamento e colabora\u00e7\u00e3o na documenta\u00e7\u00e3o;</li> <li>Discord/Teams: Para reuni\u00f5es e discuss\u00f5es;</li> </ul>"},{"location":"PadroesDeProjeto/3.5.IniciativasExtras/#atas-e-registros","title":"Atas e Registros","text":"<p>Todas as reuni\u00f5es foram documentadas com: - Participantes presentes - Hor\u00e1rios de in\u00edcio e fim - Principais decis\u00f5es tomadas - A\u00e7\u00f5es definidas para pr\u00f3ximos passos  </p> <p>Estes registros se encontram na aba Atas reuni\u00e3o.</p>"},{"location":"PadroesDeProjeto/3.PadroesDeProjeto/","title":"3. Desenho de Software (Padr\u00f5es de Projeto)","text":"<p>A Wiki ou GitPages do Projeto deve conter um t\u00f3pico dedicado ao M\u00f3dulo Desenho de Software (Padr\u00f5es de Projeto), com tr\u00eas subt\u00f3picos principais, conforme: 3.1, 3.2 e 3.3. Adicionalmente, deve constar um subt\u00f3pico sobre as participa\u00e7\u00f5es, conforme 3.4. Por fim, pode constar um subt\u00f3pico, chamado 3.5, no qual podem ser colocadas quaisquer iniciativas extras, caso ocorram (opcional). Para cada foco, revelar principalmente: Rastreabilidade &amp; Elos com Outros Artefatos, Senso Cr\u00edtico, Refer\u00eancias, Versionamentos &amp; Participa\u00e7\u00f5es e Metodologia.</p>"},{"location":"Projeto/Projeto/","title":"Projeto","text":"<p>** Projetos - Per\u00edodo   2025.2</p> <p>Segue a lista de projetos desse per\u00edodo letivo:</p> <pre><code>\u2022 G1 at\u00e9 10 membros\n\u2022 Projeto G1 - JogoDigital, baseado em qualquer jogo para inspira\u00e7\u00e3o, podendo ser em vers\u00e3o site, desktop ou aplicativo m\u00f3vel.\n\u2022 N\u00e3o usar o nome do jogo real. A ideia \u00e9 usar o nome G1_JogoDigital_X mesmo, e apenas se basear em um jogo conhecido para fins de identificar p\u00fablico-alvo, principais funcionalidades, dentre outros detalhes. N\u00e3o pegar algo pronto. Pensar em uma proposta nova.\n\n\u2022 G2 at\u00e9 10 membros\n\u2022 Projeto G2 - CorreioDigital, podendo ser em vers\u00e3o site, desktop ou aplicativo m\u00f3vel.\n\u2022 N\u00e3o usar o nome de algo real/propriet\u00e1rio. A ideia \u00e9 usar o nome G2_CorreioDigital mesmo, e apenas se basear em algo conhecido para fins de identificar p\u00fablico-alvo, principais funcionalidades, dentre outros detalhes.\n\n\u2022 G3 at\u00e9 10 membros\n\u2022 Projeto G3 - ReveleSeuHobbie, podendo ser em vers\u00e3o site, desktop ou aplicativo m\u00f3vel.\n\u2022 N\u00e3o usar o nome de algo real/propriet\u00e1rio. A ideia \u00e9 usar o nome G3_ReveleSeuHobbie mesmo, e apenas se basear em algo conhecido para fins de identificar p\u00fablico-alvo, principais funcionalidades, dentre outros detalhes.\n\n\u2022 G4 at\u00e9 10 membros\n\u2022 Projeto G4 - CuidaDeMim, baseado em qualquer site de ado\u00e7\u00e3o de pets, podendo ser em vers\u00e3o site, desktop ou aplicativo m\u00f3vel.\n\u2022 N\u00e3o usar o nome do site real. A ideia \u00e9 usar o nome G4_CuidaDeMim mesmo, e apenas se basear em algo conhecido para fins de identificar p\u00fablico-alvo, principais funcionalidades, dentre outros detalhes.\n\n\u2022 G5 at\u00e9 10 membros\n\u2022 Projeto G5 - EuRecomendo, baseado em sistemas de recomenda\u00e7\u00e3o de livros, filmes, dentre outros, podendo ser em vers\u00e3o site, desktop ou aplicativo m\u00f3vel. \n\u2022 N\u00e3o usar o nome de algo real. A ideia \u00e9 usar o nome G5_EuRecomendo mesmo, e apenas se basear em algo conhecido para fins de identificar p\u00fablico-alvo, principais funcionalidades, dentre outros detalhes.\n\n\u2022 G6 at\u00e9 10 membros\n\u2022 Projeto G6 - QueroBemEstar, baseado em qualquer contexto que envolva dicas de sa\u00fade e bem-estar, podendo ser em vers\u00e3o site, desktop ou aplicativo m\u00f3vel. \n\u2022 N\u00e3o usar o nome de algo real. A ideia \u00e9 usar o nome G6_QueroBemEstar mesmo, e apenas se basear em algo conhecido para fins de identificar p\u00fablico-alvo, principais funcionalidades, dentre outros detalhes.\n\n\u2022 G7 at\u00e9 10 membros\n\u2022 Projeto G7 - PodePedirFCTE, baseado em estabelecimentos que se encontram pr\u00f3ximos da FCTE para delivery, podendo ser em vers\u00e3o site, desktop ou aplicativo m\u00f3vel.\n\u2022 N\u00e3o usar o nome de algo real. A ideia \u00e9 usar o nome G7_PodePedirFCTE mesmo, e apenas se basear em algo conhecido para fins de identificar p\u00fablico-alvo, principais funcionalidades, dentre outros detalhes.\n\n\u2022 G8 at\u00e9 10 membros\n\u2022 Projeto G8 - Sei&amp;PossoEnsinar, possibilitando que algu\u00e9m que saiba algo ensine outro algu\u00e9m que queira aprender, e podendo ser em vers\u00e3o site, desktop ou aplicativo m\u00f3vel. \n\u2022 N\u00e3o usar o nome de algo real. A ideia \u00e9 usar o nome G8_Sei&amp;PossoEnsinar mesmo, e apenas se basear em algo conhecido para fins de identificar p\u00fablico-alvo, principais funcionalidades, dentre outros detalhes.\n</code></pre> <p>OBS: Se a turma se mantiver com 60 alunos, devem ser mantidos 6 grupos de 10 membros. Caso outros alunos sejam matriculados, ultrapassando 60 alunos, t\u00eam-se o uso de mais dois grupos, totalizando 8 grupos com at\u00e9 10 alunos cada = 80 alunos. Caso existam novos matriculados na disciplina, acima de 80 alunos, novos projetos ser\u00e3o propostos pela professora. Portanto, nesses casos, conversar com a professora na \u00e9poca.</p>"}]}